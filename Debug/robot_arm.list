
robot_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004468  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800462c  0800462c  0000562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  0000632c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e0  080046e0  0000632c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e0  080046e0  000056e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046e4  080046e4  000056e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000032c  20000000  080046e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000032c  08004a14  0000632c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08004a14  0000650c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000632c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b819  00000000  00000000  0000635c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224d  00000000  00000000  00011b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00013dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099d  00000000  00000000  00014ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fdb0  00000000  00000000  00015465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b196  00000000  00000000  00035215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab6a0  00000000  00000000  000403ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eba4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba0  00000000  00000000  000eba90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ef630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000032c 	.word	0x2000032c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004614 	.word	0x08004614

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000330 	.word	0x20000330
 8000200:	08004614 	.word	0x08004614

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800053a:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <LL_DMA_EnableStream+0x3c>)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	4413      	add	r3, r2
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4908      	ldr	r1, [pc, #32]	@ (800056c <LL_DMA_EnableStream+0x3c>)
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	440a      	add	r2, r1
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	4611      	mov	r1, r2
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	440a      	add	r2, r1
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6013      	str	r3, [r2, #0]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	080046a0 	.word	0x080046a0

08000570 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LL_DMA_SetDataLength+0x44>)
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4413      	add	r3, r2
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4413      	add	r3, r2
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	0c1b      	lsrs	r3, r3, #16
 800058e:	041b      	lsls	r3, r3, #16
 8000590:	4908      	ldr	r1, [pc, #32]	@ (80005b4 <LL_DMA_SetDataLength+0x44>)
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	440a      	add	r2, r1
 8000596:	7812      	ldrb	r2, [r2, #0]
 8000598:	4611      	mov	r1, r2
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	440a      	add	r2, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	604b      	str	r3, [r1, #4]
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	080046a0 	.word	0x080046a0

080005b8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80005c4:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <LL_DMA_SetMemoryAddress+0x2c>)
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4413      	add	r3, r2
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60d3      	str	r3, [r2, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	080046a0 	.word	0x080046a0

080005e8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80005f4:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <LL_DMA_SetPeriphAddress+0x2c>)
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6093      	str	r3, [r2, #8]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	080046a0 	.word	0x080046a0

08000618 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000626:	609a      	str	r2, [r3, #8]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2220      	movs	r2, #32
 8000640:	60da      	str	r2, [r3, #12]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800065a:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <LL_DMA_EnableIT_TC+0x3c>)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4908      	ldr	r1, [pc, #32]	@ (800068c <LL_DMA_EnableIT_TC+0x3c>)
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	440a      	add	r2, r1
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	4611      	mov	r1, r2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	440a      	add	r2, r1
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	6013      	str	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	080046a0 	.word	0x080046a0

08000690 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	330c      	adds	r3, #12
 80006b8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	e853 3f00 	ldrex	r3, [r3]
 80006c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c8:	61fb      	str	r3, [r7, #28]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	330c      	adds	r3, #12
 80006ce:	69fa      	ldr	r2, [r7, #28]
 80006d0:	61ba      	str	r2, [r7, #24]
 80006d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006d4:	6979      	ldr	r1, [r7, #20]
 80006d6:	69ba      	ldr	r2, [r7, #24]
 80006d8:	e841 2300 	strex	r3, r2, [r1]
 80006dc:	613b      	str	r3, [r7, #16]
   return(result);
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1e7      	bne.n	80006b4 <LL_USART_EnableIT_TC+0x8>
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3724      	adds	r7, #36	@ 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b089      	sub	sp, #36	@ 0x24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3314      	adds	r3, #20
 80006fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	e853 3f00 	ldrex	r3, [r3]
 8000706:	60bb      	str	r3, [r7, #8]
   return(result);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3314      	adds	r3, #20
 8000714:	69fa      	ldr	r2, [r7, #28]
 8000716:	61ba      	str	r2, [r7, #24]
 8000718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800071a:	6979      	ldr	r1, [r7, #20]
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	e841 2300 	strex	r3, r2, [r1]
 8000722:	613b      	str	r3, [r7, #16]
   return(result);
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1e7      	bne.n	80006fa <LL_USART_EnableDMAReq_RX+0x8>
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3724      	adds	r7, #36	@ 0x24
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3314      	adds	r3, #20
 8000744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	e853 3f00 	ldrex	r3, [r3]
 800074c:	60bb      	str	r3, [r7, #8]
   return(result);
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3314      	adds	r3, #20
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	61ba      	str	r2, [r7, #24]
 800075e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000760:	6979      	ldr	r1, [r7, #20]
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	e841 2300 	strex	r3, r2, [r1]
 8000768:	613b      	str	r3, [r7, #16]
   return(result);
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1e7      	bne.n	8000740 <LL_USART_EnableDMAReq_TX+0x8>
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3724      	adds	r7, #36	@ 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3304      	adds	r3, #4
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	619a      	str	r2, [r3, #24]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <UART4_DMA_Config>:
uint8_t debug_Instruction_Packet_Array[35] = { 0 };  // Array to debug instruction packet data
uint8_t debug_Status_Packet_Array[15] = { 0 };       // Array to debug status packet data

uint16_t crc = 0;

void UART4_DMA_Config() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_4, LL_USART_DMA_GetRegAddr(UART4));
 80007b8:	4824      	ldr	r0, [pc, #144]	@ (800084c <UART4_DMA_Config+0x98>)
 80007ba:	f7ff ffe0 	bl	800077e <LL_USART_DMA_GetRegAddr>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	2104      	movs	r1, #4
 80007c4:	4822      	ldr	r0, [pc, #136]	@ (8000850 <UART4_DMA_Config+0x9c>)
 80007c6:	f7ff ff0f 	bl	80005e8 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)Instruction_Packet_Array);
 80007ca:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <UART4_DMA_Config+0xa0>)
 80007cc:	461a      	mov	r2, r3
 80007ce:	2104      	movs	r1, #4
 80007d0:	481f      	ldr	r0, [pc, #124]	@ (8000850 <UART4_DMA_Config+0x9c>)
 80007d2:	f7ff fef1 	bl	80005b8 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5] + 7);
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <UART4_DMA_Config+0xa0>)
 80007d8:	795b      	ldrb	r3, [r3, #5]
 80007da:	3307      	adds	r3, #7
 80007dc:	461a      	mov	r2, r3
 80007de:	2104      	movs	r1, #4
 80007e0:	481b      	ldr	r0, [pc, #108]	@ (8000850 <UART4_DMA_Config+0x9c>)
 80007e2:	f7ff fec5 	bl	8000570 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(UART4);
 80007e6:	4819      	ldr	r0, [pc, #100]	@ (800084c <UART4_DMA_Config+0x98>)
 80007e8:	f7ff ffa6 	bl	8000738 <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC4(DMA1);
 80007ec:	4818      	ldr	r0, [pc, #96]	@ (8000850 <UART4_DMA_Config+0x9c>)
 80007ee:	f7ff ff21 	bl	8000634 <LL_DMA_ClearFlag_TC4>
	LL_USART_ClearFlag_TC(UART4);
 80007f2:	4816      	ldr	r0, [pc, #88]	@ (800084c <UART4_DMA_Config+0x98>)
 80007f4:	f7ff ff4c 	bl	8000690 <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
 80007f8:	2104      	movs	r1, #4
 80007fa:	4815      	ldr	r0, [pc, #84]	@ (8000850 <UART4_DMA_Config+0x9c>)
 80007fc:	f7ff ff28 	bl	8000650 <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(UART4);
 8000800:	4812      	ldr	r0, [pc, #72]	@ (800084c <UART4_DMA_Config+0x98>)
 8000802:	f7ff ff53 	bl	80006ac <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 8000806:	4811      	ldr	r0, [pc, #68]	@ (800084c <UART4_DMA_Config+0x98>)
 8000808:	f7ff ffb9 	bl	800077e <LL_USART_DMA_GetRegAddr>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	2102      	movs	r1, #2
 8000812:	480f      	ldr	r0, [pc, #60]	@ (8000850 <UART4_DMA_Config+0x9c>)
 8000814:	f7ff fee8 	bl	80005e8 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <UART4_DMA_Config+0xa4>)
 800081a:	461a      	mov	r2, r3
 800081c:	2102      	movs	r1, #2
 800081e:	480c      	ldr	r0, [pc, #48]	@ (8000850 <UART4_DMA_Config+0x9c>)
 8000820:	f7ff feca 	bl	80005b8 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Status_packet_length + 4);
 8000824:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <UART4_DMA_Config+0xa8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3304      	adds	r3, #4
 800082a:	461a      	mov	r2, r3
 800082c:	2104      	movs	r1, #4
 800082e:	4808      	ldr	r0, [pc, #32]	@ (8000850 <UART4_DMA_Config+0x9c>)
 8000830:	f7ff fe9e 	bl	8000570 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(UART4);
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <UART4_DMA_Config+0x98>)
 8000836:	f7ff ff5c 	bl	80006f2 <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC2(DMA1);
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <UART4_DMA_Config+0x9c>)
 800083c:	f7ff feec 	bl	8000618 <LL_DMA_ClearFlag_TC2>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 8000840:	2102      	movs	r1, #2
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <UART4_DMA_Config+0x9c>)
 8000844:	f7ff ff04 	bl	8000650 <LL_DMA_EnableIT_TC>

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40004c00 	.word	0x40004c00
 8000850:	40026000 	.word	0x40026000
 8000854:	20000004 	.word	0x20000004
 8000858:	2000039c 	.word	0x2000039c
 800085c:	20000398 	.word	0x20000398

08000860 <transmitInstructionPacket>:
	for(int i = 0; i < 15; i++)
		printf("%x, ", debug_Status_Packet_Array[i]);
	printf("\r\nyou recieved!\r\n");
}

void transmitInstructionPacket(void) {  // Transmit instruction packet to Dynamixel
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	dynamixel_Ready = 0;
 8000864:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <transmitInstructionPacket+0x3c>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
#if USE_THREE_STATE_GATE == 1
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 800086a:	2110      	movs	r1, #16
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <transmitInstructionPacket+0x40>)
 800086e:	f7ff ff92 	bl	8000796 <LL_GPIO_SetOutputPin>
	printf("1\r\n");
 8000872:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <transmitInstructionPacket+0x44>)
 8000874:	f003 fb3a 	bl	8003eec <puts>
#else
	LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_TX);
	printf("2\r\n");
#endif
	printf("3\r\n");
 8000878:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <transmitInstructionPacket+0x48>)
 800087a:	f003 fb37 	bl	8003eec <puts>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <transmitInstructionPacket+0x4c>)
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	3307      	adds	r3, #7
 8000884:	461a      	mov	r2, r3
 8000886:	2104      	movs	r1, #4
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <transmitInstructionPacket+0x50>)
 800088a:	f7ff fe71 	bl	8000570 <LL_DMA_SetDataLength>
	LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 800088e:	2104      	movs	r1, #4
 8000890:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <transmitInstructionPacket+0x50>)
 8000892:	f7ff fe4d 	bl	8000530 <LL_DMA_EnableStream>

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000000 	.word	0x20000000
 80008a0:	40020000 	.word	0x40020000
 80008a4:	0800465c 	.word	0x0800465c
 80008a8:	08004660 	.word	0x08004660
 80008ac:	20000004 	.word	0x20000004
 80008b0:	40026000 	.word	0x40026000

080008b4 <readStatusPacket_pos_DMA>:
		Status_Packet_Array[i] = LL_USART_ReceiveData8(UART4);
	}
	dynamixel_Ready = 1;
}

void readStatusPacket_pos_DMA(int32_t* position) {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if(Status_Packet_Array[8] == 0) {   //確認錯誤碼
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <readStatusPacket_pos_DMA+0x48>)
 80008be:	7a1b      	ldrb	r3, [r3, #8]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d114      	bne.n	80008ee <readStatusPacket_pos_DMA+0x3a>
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 80008c4:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <readStatusPacket_pos_DMA+0x48>)
 80008c6:	7b1b      	ldrb	r3, [r3, #12]
 80008c8:	061a      	lsls	r2, r3, #24
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <readStatusPacket_pos_DMA+0x48>)
 80008cc:	7adb      	ldrb	r3, [r3, #11]
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	431a      	orrs	r2, r3
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <readStatusPacket_pos_DMA+0x48>)
 80008d4:	7a9b      	ldrb	r3, [r3, #10]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	431a      	orrs	r2, r3
			| Status_Packet_Array[9];
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <readStatusPacket_pos_DMA+0x48>)
 80008dc:	7a5b      	ldrb	r3, [r3, #9]
 80008de:	4618      	mov	r0, r3
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <readStatusPacket_pos_DMA+0x48>)
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	440b      	add	r3, r1
			| Status_Packet_Array[9];
 80008ea:	4302      	orrs	r2, r0
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 80008ec:	601a      	str	r2, [r3, #0]
	}
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	2000039c 	.word	0x2000039c

08000900 <PING>:
	}
}

//-------------------------------------------------------------------------------------------------------------------------------
// Special Command
void PING(){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	while(dynamixel_Ready != 1) {
 8000904:	bf00      	nop
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <PING+0x70>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d1fb      	bne.n	8000906 <PING+0x6>
		}

		Instruction_Packet_Array[4] = 0xFE;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <PING+0x74>)
 8000910:	22fe      	movs	r2, #254	@ 0xfe
 8000912:	711a      	strb	r2, [r3, #4]
		Instruction_Packet_Array[5] = 0x03;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <PING+0x74>)
 8000916:	2203      	movs	r2, #3
 8000918:	715a      	strb	r2, [r3, #5]
		Instruction_Packet_Array[6] = 0x00;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <PING+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	719a      	strb	r2, [r3, #6]
		Instruction_Packet_Array[7] = 0x01;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <PING+0x74>)
 8000922:	2201      	movs	r2, #1
 8000924:	71da      	strb	r2, [r3, #7]

		crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <PING+0x74>)
 8000928:	795b      	ldrb	r3, [r3, #5]
 800092a:	3305      	adds	r3, #5
 800092c:	b29b      	uxth	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	4810      	ldr	r0, [pc, #64]	@ (8000974 <PING+0x74>)
 8000932:	f000 f911 	bl	8000b58 <update_crc>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <PING+0x78>)
 800093c:	801a      	strh	r2, [r3, #0]

		Instruction_Packet_Array[8] = crc & 0x00FF;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <PING+0x78>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <PING+0x74>)
 8000946:	721a      	strb	r2, [r3, #8]
		Instruction_Packet_Array[9] = (crc >> 8) & 0x00FF;
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <PING+0x78>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b29b      	uxth	r3, r3
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <PING+0x74>)
 8000954:	725a      	strb	r2, [r3, #9]

		Status_packet_length = 10; // ID(1) + LEN(2) + INS(1) + ERR(1) + PARA(4) + CRC(2)
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <PING+0x7c>)
 8000958:	220a      	movs	r2, #10
 800095a:	601a      	str	r2, [r3, #0]
		Packet_Return = 2;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <PING+0x80>)
 800095e:	2202      	movs	r2, #2
 8000960:	701a      	strb	r2, [r3, #0]
		Is_dynamixel_GetData = 0;
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <PING+0x84>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]

		transmitInstructionPacket();
 8000968:	f7ff ff7a 	bl	8000860 <transmitInstructionPacket>
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000004 	.word	0x20000004
 8000978:	200003b6 	.word	0x200003b6
 800097c:	20000398 	.word	0x20000398
 8000980:	20000001 	.word	0x20000001
 8000984:	20000394 	.word	0x20000394

08000988 <SyncWrite_DisableDynamixels>:
	Is_dynamixel_GetData = 0;

	transmitInstructionPacket();
}

void SyncWrite_DisableDynamixels(uint8_t n, uint8_t *ID_list) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8000994:	bf00      	nop
 8000996:	4b30      	ldr	r3, [pc, #192]	@ (8000a58 <SyncWrite_DisableDynamixels+0xd0>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d1fb      	bne.n	8000996 <SyncWrite_DisableDynamixels+0xe>
	}

	Instruction_Packet_Array[4] = 0xFE;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009a0:	22fe      	movs	r2, #254	@ 0xfe
 80009a2:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	3307      	adds	r3, #7
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009b0:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 80009b2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 80009b8:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009ba:	2283      	movs	r2, #131	@ 0x83
 80009bc:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 80009be:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009c0:	2240      	movs	r2, #64	@ 0x40
 80009c2:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 80009c4:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 80009ca:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 80009d0:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e012      	b.n	8000a02 <SyncWrite_DisableDynamixels+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	3b01      	subs	r3, #1
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	441a      	add	r2, r3
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	3305      	adds	r3, #5
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	7811      	ldrb	r1, [r2, #0]
 80009ec:	4a1b      	ldr	r2, [pc, #108]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009ee:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x00;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	330b      	adds	r3, #11
 80009f6:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	3301      	adds	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d9e8      	bls.n	80009dc <SyncWrite_DisableDynamixels+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 8000a0c:	795b      	ldrb	r3, [r3, #5]
 8000a0e:	3305      	adds	r3, #5
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 8000a16:	f000 f89f 	bl	8000b58 <update_crc>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <SyncWrite_DisableDynamixels+0xd8>)
 8000a20:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <SyncWrite_DisableDynamixels+0xd8>)
 8000a24:	881a      	ldrh	r2, [r3, #0]
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	3306      	adds	r3, #6
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	b2d1      	uxtb	r1, r2
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 8000a30:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <SyncWrite_DisableDynamixels+0xd8>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	330d      	adds	r3, #13
 8000a40:	b2d1      	uxtb	r1, r2
 8000a42:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <SyncWrite_DisableDynamixels+0xd4>)
 8000a44:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <SyncWrite_DisableDynamixels+0xdc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket();
 8000a4c:	f7ff ff08 	bl	8000860 <transmitInstructionPacket>
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	200003b6 	.word	0x200003b6
 8000a64:	20000001 	.word	0x20000001

08000a68 <SyncWrite_StatusReturnLevel>:

	Packet_Return = 0;
	transmitInstructionPacket();
}

void SyncWrite_StatusReturnLevel(uint8_t n, uint8_t *ID_list, uint8_t level) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
 8000a74:	4613      	mov	r3, r2
 8000a76:	71bb      	strb	r3, [r7, #6]
	while(dynamixel_Ready != 1) {
 8000a78:	bf00      	nop
 8000a7a:	4b32      	ldr	r3, [pc, #200]	@ (8000b44 <SyncWrite_StatusReturnLevel+0xdc>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d1fb      	bne.n	8000a7a <SyncWrite_StatusReturnLevel+0x12>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8000a82:	4b31      	ldr	r3, [pc, #196]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000a84:	22fe      	movs	r2, #254	@ 0xfe
 8000a86:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	3307      	adds	r3, #7
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000a94:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000a9e:	2283      	movs	r2, #131	@ 0x83
 8000aa0:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_STATUS_RETURN_LEVEL;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000aa4:	2244      	movs	r2, #68	@ 0x44
 8000aa6:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8000aba:	2301      	movs	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e012      	b.n	8000ae6 <SyncWrite_StatusReturnLevel+0x7e>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	441a      	add	r2, r3
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	3305      	adds	r3, #5
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	7811      	ldrb	r1, [r2, #0]
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000ad2:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = level;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	330b      	adds	r3, #11
 8000ada:	491b      	ldr	r1, [pc, #108]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	54ca      	strb	r2, [r1, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	7bfa      	ldrb	r2, [r7, #15]
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d9e8      	bls.n	8000ac0 <SyncWrite_StatusReturnLevel+0x58>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000aee:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000af0:	795b      	ldrb	r3, [r3, #5]
 8000af2:	3305      	adds	r3, #5
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000afa:	f000 f82d 	bl	8000b58 <update_crc>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <SyncWrite_StatusReturnLevel+0xe4>)
 8000b04:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <SyncWrite_StatusReturnLevel+0xe4>)
 8000b08:	881a      	ldrh	r2, [r3, #0]
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	3306      	adds	r3, #6
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	b2d1      	uxtb	r1, r2
 8000b12:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000b14:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <SyncWrite_StatusReturnLevel+0xe4>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	330d      	adds	r3, #13
 8000b24:	b2d1      	uxtb	r1, r2
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <SyncWrite_StatusReturnLevel+0xe0>)
 8000b28:	54d1      	strb	r1, [r2, r3]

	Status_Return_Level = level;
 8000b2a:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <SyncWrite_StatusReturnLevel+0xe8>)
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	7013      	strb	r3, [r2, #0]
	Packet_Return = 0;
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <SyncWrite_StatusReturnLevel+0xec>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket();
 8000b36:	f7ff fe93 	bl	8000860 <transmitInstructionPacket>
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	200003b6 	.word	0x200003b6
 8000b50:	20000002 	.word	0x20000002
 8000b54:	20000001 	.word	0x20000001

08000b58 <update_crc>:
	0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
	0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
	0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
	0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

uint16_t update_crc(uint8_t* data_blk_ptr, uint16_t data_blk_size) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
	uint16_t crc_accum = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	81fb      	strh	r3, [r7, #14]
	uint16_t i, j;

	for(j = 0; j < data_blk_size; j++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	81bb      	strh	r3, [r7, #12]
 8000b6c:	e019      	b.n	8000ba2 <update_crc+0x4a>
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	89ba      	ldrh	r2, [r7, #12]
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	440a      	add	r2, r1
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	4053      	eors	r3, r2
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000b84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	897b      	ldrh	r3, [r7, #10]
 8000b8e:	490a      	ldr	r1, [pc, #40]	@ (8000bb8 <update_crc+0x60>)
 8000b90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4053      	eors	r3, r2
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	81fb      	strh	r3, [r7, #14]
	for(j = 0; j < data_blk_size; j++) {
 8000b9c:	89bb      	ldrh	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	81bb      	strh	r3, [r7, #12]
 8000ba2:	89ba      	ldrh	r2, [r7, #12]
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3e1      	bcc.n	8000b6e <update_crc+0x16>
	}

	return crc_accum;
 8000baa:	89fb      	ldrh	r3, [r7, #14]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	200000cc 	.word	0x200000cc

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	@ (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cdc:	4907      	ldr	r1, [pc, #28]	@ (8000cfc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4013      	ands	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	40023800 	.word	0x40023800

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000d04:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000d08:	f7ff ffe2 	bl	8000cd0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000d0c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000d10:	f7ff ffde 	bl	8000cd0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d14:	f7ff ff52 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffa2 	bl	8000c68 <NVIC_EncodePriority>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4619      	mov	r1, r3
 8000d28:	200b      	movs	r0, #11
 8000d2a:	f7ff ff73 	bl	8000c14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d2e:	200b      	movs	r0, #11
 8000d30:	f7ff ff52 	bl	8000bd8 <__NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d34:	f7ff ff42 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff92 	bl	8000c68 <NVIC_EncodePriority>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4619      	mov	r1, r3
 8000d48:	200d      	movs	r0, #13
 8000d4a:	f7ff ff63 	bl	8000c14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d4e:	200d      	movs	r0, #13
 8000d50:	f7ff ff42 	bl	8000bd8 <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d54:	f7ff ff32 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff82 	bl	8000c68 <NVIC_EncodePriority>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4619      	mov	r1, r3
 8000d68:	200f      	movs	r0, #15
 8000d6a:	f7ff ff53 	bl	8000c14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f7ff ff32 	bl	8000bd8 <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d74:	f7ff ff22 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff72 	bl	8000c68 <NVIC_EncodePriority>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4619      	mov	r1, r3
 8000d88:	2010      	movs	r0, #16
 8000d8a:	f7ff ff43 	bl	8000c14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d8e:	2010      	movs	r0, #16
 8000d90:	f7ff ff22 	bl	8000bd8 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d94:	f7ff ff12 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff62 	bl	8000c68 <NVIC_EncodePriority>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4619      	mov	r1, r3
 8000da8:	2011      	movs	r0, #17
 8000daa:	f7ff ff33 	bl	8000c14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000dae:	2011      	movs	r0, #17
 8000db0:	f7ff ff12 	bl	8000bd8 <__NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000db4:	f7ff ff02 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff52 	bl	8000c68 <NVIC_EncodePriority>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	202f      	movs	r0, #47	@ 0x2f
 8000dca:	f7ff ff23 	bl	8000c14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000dce:	202f      	movs	r0, #47	@ 0x2f
 8000dd0:	f7ff ff02 	bl	8000bd8 <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000dd4:	f7ff fef2 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff42 	bl	8000c68 <NVIC_EncodePriority>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4619      	mov	r1, r3
 8000de8:	2045      	movs	r0, #69	@ 0x45
 8000dea:	f7ff ff13 	bl	8000c14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000dee:	2045      	movs	r0, #69	@ 0x45
 8000df0:	f7ff fef2 	bl	8000bd8 <__NVIC_EnableIRQ>

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <LL_AHB1_GRP1_EnableClock>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e04:	4907      	ldr	r1, [pc, #28]	@ (8000e24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4013      	ands	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40023800 	.word	0x40023800

08000e28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000e2c:	2080      	movs	r0, #128	@ 0x80
 8000e2e:	f7ff ffe3 	bl	8000df8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000e32:	2004      	movs	r0, #4
 8000e34:	f7ff ffe0 	bl	8000df8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff ffdd 	bl	8000df8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff ffda 	bl	8000df8 <LL_AHB1_GRP1_EnableClock>

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <__NVIC_SetPriorityGrouping>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <LL_RCC_HSI_Enable+0x1c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <LL_RCC_HSI_Enable+0x1c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <LL_RCC_HSI_IsReady+0x20>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	bf0c      	ite	eq
 8000f98:	2301      	moveq	r3, #1
 8000f9a:	2300      	movne	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40023800 	.word	0x40023800

08000fac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4904      	ldr	r1, [pc, #16]	@ (8000fd4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <LL_RCC_SetSysClkSource+0x24>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f023 0203 	bic.w	r2, r3, #3
 8000fe8:	4904      	ldr	r1, [pc, #16]	@ (8000ffc <LL_RCC_SetSysClkSource+0x24>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	608b      	str	r3, [r1, #8]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023800 	.word	0x40023800

08001000 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <LL_RCC_GetSysClkSource+0x18>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 030c 	and.w	r3, r3, #12
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <LL_RCC_SetAHBPrescaler+0x24>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800102c:	4904      	ldr	r1, [pc, #16]	@ (8001040 <LL_RCC_SetAHBPrescaler+0x24>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40023800 	.word	0x40023800

08001044 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <LL_RCC_SetAPB1Prescaler+0x24>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001054:	4904      	ldr	r1, [pc, #16]	@ (8001068 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40023800 	.word	0x40023800

0800106c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800107c:	4904      	ldr	r1, [pc, #16]	@ (8001090 <LL_RCC_SetAPB2Prescaler+0x24>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4313      	orrs	r3, r2
 8001082:	608b      	str	r3, [r1, #8]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40023800 	.word	0x40023800

08001094 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <LL_RCC_SetTIMPrescaler+0x28>)
 800109e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80010a6:	4905      	ldr	r1, [pc, #20]	@ (80010bc <LL_RCC_SetTIMPrescaler+0x28>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40023800 	.word	0x40023800

080010c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <LL_RCC_PLL_Enable+0x1c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <LL_RCC_PLL_Enable+0x1c>)
 80010ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <LL_RCC_PLL_IsReady+0x24>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80010f0:	bf0c      	ite	eq
 80010f2:	2301      	moveq	r3, #1
 80010f4:	2300      	movne	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 800111c:	4013      	ands	r3, r2
 800111e:	68f9      	ldr	r1, [r7, #12]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4311      	orrs	r1, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	0192      	lsls	r2, r2, #6
 8001128:	430a      	orrs	r2, r1
 800112a:	490c      	ldr	r1, [pc, #48]	@ (800115c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001138:	4908      	ldr	r1, [pc, #32]	@ (800115c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001148:	4904      	ldr	r1, [pc, #16]	@ (800115c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800
 8001160:	ffbf8000 	.word	0xffbf8000

08001164 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800116e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001170:	4907      	ldr	r1, [pc, #28]	@ (8001190 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800117a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4013      	ands	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40023800 	.word	0x40023800

08001194 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800119e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40023800 	.word	0x40023800

080011c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <LL_FLASH_SetLatency+0x24>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 020f 	bic.w	r2, r3, #15
 80011d4:	4904      	ldr	r1, [pc, #16]	@ (80011e8 <LL_FLASH_SetLatency+0x24>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40023c00 	.word	0x40023c00

080011ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <LL_FLASH_GetLatency+0x18>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 030f 	and.w	r3, r3, #15
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <LL_PWR_EnableOverDriveMode+0x1c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <LL_PWR_EnableOverDriveMode+0x1c>)
 8001212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000

08001228 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001238:	4904      	ldr	r1, [pc, #16]	@ (800124c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40007000 	.word	0x40007000

08001250 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40007000 	.word	0x40007000

08001278 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f06f 0201 	mvn.w	r2, #1
 80012a6:	611a      	str	r2, [r3, #16]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60da      	str	r2, [r3, #12]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_USART_IsActiveFlag_TXE>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e4:	2b80      	cmp	r3, #128	@ 0x80
 80012e6:	bf0c      	ite	eq
 80012e8:	2301      	moveq	r3, #1
 80012ea:	2300      	movne	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	605a      	str	r2, [r3, #4]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800131e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001322:	f7ff ff37 	bl	8001194 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001326:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800132a:	f7ff ff1b 	bl	8001164 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f7ff fd8a 	bl	8000e48 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001334:	f7ff fdac 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001338:	4603      	mov	r3, r0
 800133a:	2200      	movs	r2, #0
 800133c:	210f      	movs	r1, #15
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fdde 	bl	8000f00 <NVIC_EncodePriority>
 8001344:	4603      	mov	r3, r0
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff fdae 	bl	8000eac <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001350:	f000 f838 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001354:	f7ff fd68 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001358:	f7ff fcd2 	bl	8000d00 <MX_DMA_Init>
  MX_UART4_Init();
 800135c:	f001 fab2 	bl	80028c4 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8001360:	f001 fc1e 	bl	8002ba0 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001364:	f000 fab4 	bl	80018d0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001368:	f000 fb1c 	bl	80019a4 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800136c:	f001 fb6a 	bl	8002a44 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001370:	f001 f82e 	bl	80023d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 8001374:	4811      	ldr	r0, [pc, #68]	@ (80013bc <main+0xa4>)
 8001376:	f7ff ff8f 	bl	8001298 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM1);
 800137a:	4810      	ldr	r0, [pc, #64]	@ (80013bc <main+0xa4>)
 800137c:	f7ff ff9a 	bl	80012b4 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 8001380:	480e      	ldr	r0, [pc, #56]	@ (80013bc <main+0xa4>)
 8001382:	f7ff ff79 	bl	8001278 <LL_TIM_EnableCounter>
  printf("start\r\n");
 8001386:	480e      	ldr	r0, [pc, #56]	@ (80013c0 <main+0xa8>)
 8001388:	f002 fdb0 	bl	8003eec <puts>
  LL_mDelay(100);
 800138c:	2064      	movs	r0, #100	@ 0x64
 800138e:	f002 fc5f 	bl	8003c50 <LL_mDelay>
	UART4_DMA_Config();
 8001392:	f7ff fa0f 	bl	80007b4 <UART4_DMA_Config>
	uint8_t ID_list[2] = { 1,2 };
 8001396:	f240 2301 	movw	r3, #513	@ 0x201
 800139a:	80bb      	strh	r3, [r7, #4]
//	SyncRead_Position(2, ID_list);
	SyncWrite_StatusReturnLevel(2, ID_list, 1);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	2002      	movs	r0, #2
 80013a4:	f7ff fb60 	bl	8000a68 <SyncWrite_StatusReturnLevel>
	SyncWrite_DisableDynamixels(2, ID_list);
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff faeb 	bl	8000988 <SyncWrite_DisableDynamixels>
	PING();
 80013b2:	f7ff faa5 	bl	8000900 <PING>
//	USART6_DMA_Config();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013b6:	bf00      	nop
 80013b8:	e7fd      	b.n	80013b6 <main+0x9e>
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000
 80013c0:	08004670 	.word	0x08004670

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80013c8:	2005      	movs	r0, #5
 80013ca:	f7ff fefb 	bl	80011c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80013ce:	bf00      	nop
 80013d0:	f7ff ff0c 	bl	80011ec <LL_FLASH_GetLatency>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d1fa      	bne.n	80013d0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80013da:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 80013de:	f7ff ff23 	bl	8001228 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 80013e2:	f7ff ff11 	bl	8001208 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 80013e6:	2010      	movs	r0, #16
 80013e8:	f7ff fde0 	bl	8000fac <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80013ec:	f7ff fdbc 	bl	8000f68 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80013f0:	bf00      	nop
 80013f2:	f7ff fdc9 	bl	8000f88 <LL_RCC_HSI_IsReady>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d1fa      	bne.n	80013f2 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 180, LL_RCC_PLLP_DIV_2);
 80013fc:	2300      	movs	r3, #0
 80013fe:	22b4      	movs	r2, #180	@ 0xb4
 8001400:	2108      	movs	r1, #8
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fe80 	bl	8001108 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001408:	f7ff fe5a 	bl	80010c0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800140c:	bf00      	nop
 800140e:	f7ff fe67 	bl	80010e0 <LL_RCC_PLL_IsReady>
 8001412:	4603      	mov	r3, r0
 8001414:	2b01      	cmp	r3, #1
 8001416:	d1fa      	bne.n	800140e <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001418:	bf00      	nop
 800141a:	f7ff ff19 	bl	8001250 <LL_PWR_IsActiveFlag_VOS>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0fa      	beq.n	800141a <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff fdf9 	bl	800101c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800142a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800142e:	f7ff fe09 	bl	8001044 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001432:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001436:	f7ff fe19 	bl	800106c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800143a:	2002      	movs	r0, #2
 800143c:	f7ff fdcc 	bl	8000fd8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001440:	bf00      	nop
 8001442:	f7ff fddd 	bl	8001000 <LL_RCC_GetSysClkSource>
 8001446:	4603      	mov	r3, r0
 8001448:	2b08      	cmp	r3, #8
 800144a:	d1fa      	bne.n	8001442 <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <SystemClock_Config+0xa0>)
 800144e:	f002 fbf1 	bl	8003c34 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 8001452:	4804      	ldr	r0, [pc, #16]	@ (8001464 <SystemClock_Config+0xa0>)
 8001454:	f002 fc22 	bl	8003c9c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fe1b 	bl	8001094 <LL_RCC_SetTIMPrescaler>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0aba9500 	.word	0x0aba9500

08001468 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e011      	b.n	800149e <_write+0x36>
		LL_USART_TransmitData8(USART2, (uint8_t)*ptr++);
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	60ba      	str	r2, [r7, #8]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	480a      	ldr	r0, [pc, #40]	@ (80014b0 <_write+0x48>)
 8001486:	f7ff ff38 	bl	80012fa <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2) == RESET)
 800148a:	bf00      	nop
 800148c:	4808      	ldr	r0, [pc, #32]	@ (80014b0 <_write+0x48>)
 800148e:	f7ff ff21 	bl	80012d4 <LL_USART_IsActiveFlag_TXE>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f9      	beq.n	800148c <_write+0x24>
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbe9      	blt.n	800147a <_write+0x12>
			;
	}
	return len;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40004400 	.word	0x40004400

080014b4 <__NVIC_GetPriorityGrouping>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4907      	ldr	r1, [pc, #28]	@ (8001508 <__NVIC_EnableIRQ+0x38>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	@ (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	@ (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	@ 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	@ 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <LL_DMA_SetDataTransferDirection>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <LL_DMA_SetDataTransferDirection+0x44>)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80015e8:	4908      	ldr	r1, [pc, #32]	@ (800160c <LL_DMA_SetDataTransferDirection+0x44>)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	440b      	add	r3, r1
 80015f6:	4619      	mov	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	080046a8 	.word	0x080046a8

08001610 <LL_DMA_SetMode>:
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LL_DMA_SetMode+0x44>)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8001630:	4908      	ldr	r1, [pc, #32]	@ (8001654 <LL_DMA_SetMode+0x44>)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	440b      	add	r3, r1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	440b      	add	r3, r1
 800163e:	4619      	mov	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	080046a8 	.word	0x080046a8

08001658 <LL_DMA_SetPeriphIncMode>:
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001664:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <LL_DMA_SetPeriphIncMode+0x44>)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001678:	4908      	ldr	r1, [pc, #32]	@ (800169c <LL_DMA_SetPeriphIncMode+0x44>)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	440b      	add	r3, r1
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	440b      	add	r3, r1
 8001686:	4619      	mov	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	080046a8 	.word	0x080046a8

080016a0 <LL_DMA_SetMemoryIncMode>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <LL_DMA_SetMemoryIncMode+0x44>)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80016c0:	4908      	ldr	r1, [pc, #32]	@ (80016e4 <LL_DMA_SetMemoryIncMode+0x44>)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	440b      	add	r3, r1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	440b      	add	r3, r1
 80016ce:	4619      	mov	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	080046a8 	.word	0x080046a8

080016e8 <LL_DMA_SetPeriphSize>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LL_DMA_SetPeriphSize+0x44>)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8001708:	4908      	ldr	r1, [pc, #32]	@ (800172c <LL_DMA_SetPeriphSize+0x44>)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	440b      	add	r3, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	440b      	add	r3, r1
 8001716:	4619      	mov	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	080046a8 	.word	0x080046a8

08001730 <LL_DMA_SetMemorySize>:
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800173c:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <LL_DMA_SetMemorySize+0x44>)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8001750:	4908      	ldr	r1, [pc, #32]	@ (8001774 <LL_DMA_SetMemorySize+0x44>)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	440b      	add	r3, r1
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	440b      	add	r3, r1
 800175e:	4619      	mov	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	080046a8 	.word	0x080046a8

08001778 <LL_DMA_SetStreamPriorityLevel>:
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001798:	4908      	ldr	r1, [pc, #32]	@ (80017bc <LL_DMA_SetStreamPriorityLevel+0x44>)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	440b      	add	r3, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	440b      	add	r3, r1
 80017a6:	4619      	mov	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	080046a8 	.word	0x080046a8

080017c0 <LL_DMA_SetChannelSelection>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <LL_DMA_SetChannelSelection+0x44>)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80017e0:	4908      	ldr	r1, [pc, #32]	@ (8001804 <LL_DMA_SetChannelSelection+0x44>)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	440b      	add	r3, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	440b      	add	r3, r1
 80017ee:	4619      	mov	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	080046a8 	.word	0x080046a8

08001808 <LL_DMA_DisableFifoMode>:
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001812:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <LL_DMA_DisableFifoMode+0x3c>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4908      	ldr	r1, [pc, #32]	@ (8001844 <LL_DMA_DisableFifoMode+0x3c>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	440a      	add	r2, r1
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	4611      	mov	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	440a      	add	r2, r1
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6153      	str	r3, [r2, #20]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	080046a8 	.word	0x080046a8

08001848 <LL_AHB1_GRP1_EnableClock>:
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001854:	4907      	ldr	r1, [pc, #28]	@ (8001874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800185e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4013      	ands	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40023800 	.word	0x40023800

08001878 <LL_APB1_GRP1_EnableClock>:
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001884:	4907      	ldr	r1, [pc, #28]	@ (80018a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800188e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4013      	ands	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40023800 	.word	0x40023800

080018a8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 0210 	bic.w	r2, r3, #16
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	605a      	str	r2, [r3, #4]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b090      	sub	sp, #64	@ 0x40
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80018d6:	f107 0318 	add.w	r3, r7, #24
 80018da:	2228      	movs	r2, #40	@ 0x28
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fbe4 	bl	80040ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80018f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80018f8:	f7ff ffbe 	bl	8001878 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80018fc:	2004      	movs	r0, #4
 80018fe:	f7ff ffa3 	bl	8001848 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001902:	2002      	movs	r0, #2
 8001904:	f7ff ffa0 	bl	8001848 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001908:	230c      	movs	r3, #12
 800190a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800190c:	2302      	movs	r3, #2
 800190e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800191c:	2305      	movs	r3, #5
 800191e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	481c      	ldr	r0, [pc, #112]	@ (8001998 <MX_SPI2_Init+0xc8>)
 8001926:	f001 fb3f 	bl	8002fa8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800192a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800192e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001930:	2302      	movs	r3, #2
 8001932:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001940:	2305      	movs	r3, #5
 8001942:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4814      	ldr	r0, [pc, #80]	@ (800199c <MX_SPI2_Init+0xcc>)
 800194a:	f001 fb2d 	bl	8002fa8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001952:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001956:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 800196a:	2300      	movs	r3, #0
 800196c:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001976:	230a      	movs	r3, #10
 8001978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800197a:	f107 0318 	add.w	r3, r7, #24
 800197e:	4619      	mov	r1, r3
 8001980:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <MX_SPI2_Init+0xd0>)
 8001982:	f001 fd2e 	bl	80033e2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001986:	2100      	movs	r1, #0
 8001988:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_SPI2_Init+0xd0>)
 800198a:	f7ff ff8d 	bl	80018a8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	3740      	adds	r7, #64	@ 0x40
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020800 	.word	0x40020800
 800199c:	40020400 	.word	0x40020400
 80019a0:	40003800 	.word	0x40003800

080019a4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	@ 0x40
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	2228      	movs	r2, #40	@ 0x28
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fb7a 	bl	80040ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80019c8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80019cc:	f7ff ff54 	bl	8001878 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80019d0:	2004      	movs	r0, #4
 80019d2:	f7ff ff39 	bl	8001848 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC1   ------> SPI3_MOSI
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80019d6:	2302      	movs	r3, #2
 80019d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019da:	2302      	movs	r3, #2
 80019dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80019ea:	2305      	movs	r3, #5
 80019ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	463b      	mov	r3, r7
 80019f0:	4619      	mov	r1, r3
 80019f2:	4851      	ldr	r0, [pc, #324]	@ (8001b38 <MX_SPI3_Init+0x194>)
 80019f4:	f001 fad8 	bl	8002fa8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80019f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019fe:	2302      	movs	r3, #2
 8001a00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a12:	463b      	mov	r3, r7
 8001a14:	4619      	mov	r1, r3
 8001a16:	4848      	ldr	r0, [pc, #288]	@ (8001b38 <MX_SPI3_Init+0x194>)
 8001a18:	f001 fac6 	bl	8002fa8 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4846      	ldr	r0, [pc, #280]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a22:	f7ff fecd 	bl	80017c0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4844      	ldr	r0, [pc, #272]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a2c:	f7ff fdcc 	bl	80015c8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	4841      	ldr	r0, [pc, #260]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a36:	f7ff fe9f 	bl	8001778 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	483f      	ldr	r0, [pc, #252]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a40:	f7ff fde6 	bl	8001610 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	483c      	ldr	r0, [pc, #240]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a4a:	f7ff fe05 	bl	8001658 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8001a4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a52:	2100      	movs	r1, #0
 8001a54:	4839      	ldr	r0, [pc, #228]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a56:	f7ff fe23 	bl	80016a0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4837      	ldr	r0, [pc, #220]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a60:	f7ff fe42 	bl	80016e8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	4834      	ldr	r0, [pc, #208]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a6a:	f7ff fe61 	bl	8001730 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4832      	ldr	r0, [pc, #200]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a72:	f7ff fec9 	bl	8001808 <LL_DMA_DisableFifoMode>

  /* SPI3_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_7, LL_DMA_CHANNEL_0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2107      	movs	r1, #7
 8001a7a:	4830      	ldr	r0, [pc, #192]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a7c:	f7ff fea0 	bl	80017c0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001a80:	2240      	movs	r2, #64	@ 0x40
 8001a82:	2107      	movs	r1, #7
 8001a84:	482d      	ldr	r0, [pc, #180]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a86:	f7ff fd9f 	bl	80015c8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2107      	movs	r1, #7
 8001a8e:	482b      	ldr	r0, [pc, #172]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a90:	f7ff fe72 	bl	8001778 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2107      	movs	r1, #7
 8001a98:	4828      	ldr	r0, [pc, #160]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001a9a:	f7ff fdb9 	bl	8001610 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2107      	movs	r1, #7
 8001aa2:	4826      	ldr	r0, [pc, #152]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001aa4:	f7ff fdd8 	bl	8001658 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 8001aa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aac:	2107      	movs	r1, #7
 8001aae:	4823      	ldr	r0, [pc, #140]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001ab0:	f7ff fdf6 	bl	80016a0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2107      	movs	r1, #7
 8001ab8:	4820      	ldr	r0, [pc, #128]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001aba:	f7ff fe15 	bl	80016e8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2107      	movs	r1, #7
 8001ac2:	481e      	ldr	r0, [pc, #120]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001ac4:	f7ff fe34 	bl	8001730 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_7);
 8001ac8:	2107      	movs	r1, #7
 8001aca:	481c      	ldr	r0, [pc, #112]	@ (8001b3c <MX_SPI3_Init+0x198>)
 8001acc:	f7ff fe9c 	bl	8001808 <LL_DMA_DisableFifoMode>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ad0:	f7ff fcf0 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fd40 	bl	8001560 <NVIC_EncodePriority>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	2033      	movs	r0, #51	@ 0x33
 8001ae6:	f7ff fd11 	bl	800150c <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 8001aea:	2033      	movs	r0, #51	@ 0x33
 8001aec:	f7ff fcf0 	bl	80014d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001af4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001af8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b10:	2300      	movs	r3, #0
 8001b12:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001b18:	230a      	movs	r3, #10
 8001b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	4619      	mov	r1, r3
 8001b22:	4807      	ldr	r0, [pc, #28]	@ (8001b40 <MX_SPI3_Init+0x19c>)
 8001b24:	f001 fc5d 	bl	80033e2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <MX_SPI3_Init+0x19c>)
 8001b2c:	f7ff febc 	bl	80018a8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3740      	adds	r7, #64	@ 0x40
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40026000 	.word	0x40026000
 8001b40:	40003c00 	.word	0x40003c00

08001b44 <LL_DMA_EnableStream>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b80 <LL_DMA_EnableStream+0x3c>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4908      	ldr	r1, [pc, #32]	@ (8001b80 <LL_DMA_EnableStream+0x3c>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	440a      	add	r2, r1
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	4611      	mov	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	440a      	add	r2, r1
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6013      	str	r3, [r2, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	080046b0 	.word	0x080046b0

08001b84 <LL_DMA_DisableStream>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <LL_DMA_DisableStream+0x3c>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4908      	ldr	r1, [pc, #32]	@ (8001bc0 <LL_DMA_DisableStream+0x3c>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	440a      	add	r2, r1
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	440a      	add	r2, r1
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6013      	str	r3, [r2, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	080046b0 	.word	0x080046b0

08001bc4 <LL_DMA_SetDataLength>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <LL_DMA_SetDataLength+0x44>)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	041b      	lsls	r3, r3, #16
 8001be4:	4908      	ldr	r1, [pc, #32]	@ (8001c08 <LL_DMA_SetDataLength+0x44>)
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	440a      	add	r2, r1
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	4611      	mov	r1, r2
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	440a      	add	r2, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	080046b0 	.word	0x080046b0

08001c0c <LL_DMA_IsActiveFlag_TC2>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_DMA_IsActiveFlag_TC4>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0320 	and.w	r3, r3, #32
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_DMA_IsActiveFlag_TC5>:
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_DMA_IsActiveFlag_TC6>:
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_DMA_IsActiveFlag_TC7>:
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF7)==(DMA_HISR_TCIF7));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
} 
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_DMA_ClearFlag_TC2>:
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ce0:	609a      	str	r2, [r3, #8]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_DMA_ClearFlag_TC4>:
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	60da      	str	r2, [r3, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_DMA_ClearFlag_TC5>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d16:	60da      	str	r2, [r3, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_DMA_ClearFlag_TC6>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d32:	60da      	str	r2, [r3, #12]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_DMA_ClearFlag_TC7>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF7);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d4e:	60da      	str	r2, [r3, #12]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_TIM_ClearFlag_UPDATE>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f06f 0201 	mvn.w	r2, #1
 8001d6a:	611a      	str	r2, [r3, #16]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_USART_IsActiveFlag_TC>:
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dae:	2b40      	cmp	r3, #64	@ 0x40
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_USART_ClearFlag_TC>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dd2:	601a      	str	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_USART_EnableDMAReq_RX>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3314      	adds	r3, #20
 8001dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	e853 3f00 	ldrex	r3, [r3]
 8001df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3314      	adds	r3, #20
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	61ba      	str	r2, [r7, #24]
 8001e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e08:	6979      	ldr	r1, [r7, #20]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	e841 2300 	strex	r3, r2, [r1]
 8001e10:	613b      	str	r3, [r7, #16]
   return(result);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e7      	bne.n	8001de8 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3724      	adds	r7, #36	@ 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	041a      	lsls	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <NMI_Handler+0x4>

08001e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1)) {
 8001eb8:	4814      	ldr	r0, [pc, #80]	@ (8001f0c <DMA1_Stream2_IRQHandler+0x58>)
 8001eba:	f7ff fea7 	bl	8001c0c <LL_DMA_IsActiveFlag_TC2>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d021      	beq.n	8001f08 <DMA1_Stream2_IRQHandler+0x54>
			LL_DMA_ClearFlag_TC2(DMA1);
 8001ec4:	4811      	ldr	r0, [pc, #68]	@ (8001f0c <DMA1_Stream2_IRQHandler+0x58>)
 8001ec6:	f7ff ff04 	bl	8001cd2 <LL_DMA_ClearFlag_TC2>
			printf("stream2 it\r\n");
 8001eca:	4811      	ldr	r0, [pc, #68]	@ (8001f10 <DMA1_Stream2_IRQHandler+0x5c>)
 8001ecc:	f002 f80e 	bl	8003eec <puts>
//			LL_mDelay(100);
			readStatusPacket_pos_DMA(dynamixel_position);
 8001ed0:	4810      	ldr	r0, [pc, #64]	@ (8001f14 <DMA1_Stream2_IRQHandler+0x60>)
 8001ed2:	f7fe fcef 	bl	80008b4 <readStatusPacket_pos_DMA>
//			readStatusPacket_PING(dynamixel_position);
			//		readStatusPacket_pos_vel_DMA(dynamixel_position, dynamixel_velocity);
			//		readStatusPacket_pos_vel_cur_DMA(dynamixel_position, dynamixel_velocity, dynamixel_current);
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <DMA1_Stream2_IRQHandler+0x58>)
 8001eda:	f7ff fe53 	bl	8001b84 <LL_DMA_DisableStream>

			Packet_Return -= 1;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <DMA1_Stream2_IRQHandler+0x64>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <DMA1_Stream2_IRQHandler+0x64>)
 8001ee8:	701a      	strb	r2, [r3, #0]
			if(Packet_Return == 0) {
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <DMA1_Stream2_IRQHandler+0x64>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <DMA1_Stream2_IRQHandler+0x4c>
				Is_dynamixel_GetData = 1;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <DMA1_Stream2_IRQHandler+0x68>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
				dynamixel_Ready = 1;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <DMA1_Stream2_IRQHandler+0x6c>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001efe:	e003      	b.n	8001f08 <DMA1_Stream2_IRQHandler+0x54>
				LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8001f00:	2102      	movs	r1, #2
 8001f02:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <DMA1_Stream2_IRQHandler+0x58>)
 8001f04:	f7ff fe1e 	bl	8001b44 <LL_DMA_EnableStream>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40026000 	.word	0x40026000
 8001f10:	08004678 	.word	0x08004678
 8001f14:	20000348 	.word	0x20000348
 8001f18:	20000001 	.word	0x20000001
 8001f1c:	20000394 	.word	0x20000394
 8001f20:	20000000 	.word	0x20000000

08001f24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1) {
 8001f28:	4807      	ldr	r0, [pc, #28]	@ (8001f48 <DMA1_Stream4_IRQHandler+0x24>)
 8001f2a:	f7ff fe83 	bl	8001c34 <LL_DMA_IsActiveFlag_TC4>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d106      	bne.n	8001f42 <DMA1_Stream4_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC4(DMA1);
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <DMA1_Stream4_IRQHandler+0x24>)
 8001f36:	f7ff feda 	bl	8001cee <LL_DMA_ClearFlag_TC4>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <DMA1_Stream4_IRQHandler+0x24>)
 8001f3e:	f7ff fe21 	bl	8001b84 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40026000 	.word	0x40026000

08001f4c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 8001f50:	4807      	ldr	r0, [pc, #28]	@ (8001f70 <DMA1_Stream5_IRQHandler+0x24>)
 8001f52:	f7ff fe82 	bl	8001c5a <LL_DMA_IsActiveFlag_TC5>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d106      	bne.n	8001f6a <DMA1_Stream5_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC5(DMA1);
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <DMA1_Stream5_IRQHandler+0x24>)
 8001f5e:	f7ff fed3 	bl	8001d08 <LL_DMA_ClearFlag_TC5>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8001f62:	2105      	movs	r1, #5
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <DMA1_Stream5_IRQHandler+0x24>)
 8001f66:	f7ff fe0d 	bl	8001b84 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40026000 	.word	0x40026000

08001f74 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1) {
 8001f78:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <DMA1_Stream6_IRQHandler+0x24>)
 8001f7a:	f7ff fe82 	bl	8001c82 <LL_DMA_IsActiveFlag_TC6>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <DMA1_Stream6_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC6(DMA1);
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <DMA1_Stream6_IRQHandler+0x24>)
 8001f86:	f7ff fecd 	bl	8001d24 <LL_DMA_ClearFlag_TC6>

			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8001f8a:	2106      	movs	r1, #6
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <DMA1_Stream6_IRQHandler+0x24>)
 8001f8e:	f7ff fdf9 	bl	8001b84 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40026000 	.word	0x40026000

08001f9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 8001fa0:	4806      	ldr	r0, [pc, #24]	@ (8001fbc <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001fa2:	f7ff fee9 	bl	8001d78 <LL_TIM_IsActiveFlag_UPDATE>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <TIM1_UP_TIM10_IRQHandler+0x1c>
			LL_TIM_ClearFlag_UPDATE(TIM1);
 8001fac:	4803      	ldr	r0, [pc, #12]	@ (8001fbc <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001fae:	f7ff fed5 	bl	8001d5c <LL_TIM_ClearFlag_UPDATE>
			start_trans_mx = 1;
 8001fb2:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	200003b8 	.word	0x200003b8

08001fc4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1)) {
 8001fc8:	4807      	ldr	r0, [pc, #28]	@ (8001fe8 <DMA1_Stream7_IRQHandler+0x24>)
 8001fca:	f7ff fe6e 	bl	8001caa <LL_DMA_IsActiveFlag_TC7>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <DMA1_Stream7_IRQHandler+0x1e>
		LL_DMA_ClearFlag_TC7(DMA1);
 8001fd4:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <DMA1_Stream7_IRQHandler+0x24>)
 8001fd6:	f7ff feb3 	bl	8001d40 <LL_DMA_ClearFlag_TC7>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_7); //DMA TX�@finished disable stream
 8001fda:	2107      	movs	r1, #7
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <DMA1_Stream7_IRQHandler+0x24>)
 8001fde:	f7ff fdd1 	bl	8001b84 <LL_DMA_DisableStream>
	}
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40026000 	.word	0x40026000

08001fec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	printf("uart4 it\r\n");
 8002000:	481c      	ldr	r0, [pc, #112]	@ (8002074 <UART4_IRQHandler+0x78>)
 8002002:	f001 ff73 	bl	8003eec <puts>
	LL_mDelay(100);
 8002006:	2064      	movs	r0, #100	@ 0x64
 8002008:	f001 fe22 	bl	8003c50 <LL_mDelay>
	if(LL_USART_IsActiveFlag_TC(UART4) == 1) {
 800200c:	481a      	ldr	r0, [pc, #104]	@ (8002078 <UART4_IRQHandler+0x7c>)
 800200e:	f7ff fec6 	bl	8001d9e <LL_USART_IsActiveFlag_TC>
 8002012:	4603      	mov	r3, r0
 8002014:	2b01      	cmp	r3, #1
 8002016:	d12b      	bne.n	8002070 <UART4_IRQHandler+0x74>
				LL_USART_ClearFlag_TC(UART4);
 8002018:	4817      	ldr	r0, [pc, #92]	@ (8002078 <UART4_IRQHandler+0x7c>)
 800201a:	f7ff fed3 	bl	8001dc4 <LL_USART_ClearFlag_TC>
	#if USE_THREE_STATE_GATE == 1
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 800201e:	2110      	movs	r1, #16
 8002020:	4816      	ldr	r0, [pc, #88]	@ (800207c <UART4_IRQHandler+0x80>)
 8002022:	f7ff ff00 	bl	8001e26 <LL_GPIO_ResetOutputPin>
	#else
			LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_RX); //change UART direction
	#endif

				if(Packet_Return == 0) {
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <UART4_IRQHandler+0x84>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <UART4_IRQHandler+0x3a>
					dynamixel_Ready = 1;
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <UART4_IRQHandler+0x88>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
					return;
 8002034:	e01c      	b.n	8002070 <UART4_IRQHandler+0x74>
				}
				else if(Packet_Return == 1) {
 8002036:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <UART4_IRQHandler+0x84>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d103      	bne.n	8002046 <UART4_IRQHandler+0x4a>
					dynamixel_Ready = 2;
 800203e:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <UART4_IRQHandler+0x88>)
 8002040:	2202      	movs	r2, #2
 8002042:	701a      	strb	r2, [r3, #0]
					return;
 8002044:	e014      	b.n	8002070 <UART4_IRQHandler+0x74>
				}
				else {
					printf("Packet_Return \r\n");
 8002046:	4810      	ldr	r0, [pc, #64]	@ (8002088 <UART4_IRQHandler+0x8c>)
 8002048:	f001 ff50 	bl	8003eec <puts>
					dynamixel_Ready = 2;
 800204c:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <UART4_IRQHandler+0x88>)
 800204e:	2202      	movs	r2, #2
 8002050:	701a      	strb	r2, [r3, #0]
//					LL_mDelay(100);

					LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <UART4_IRQHandler+0x90>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3304      	adds	r3, #4
 8002058:	461a      	mov	r2, r3
 800205a:	2102      	movs	r1, #2
 800205c:	480c      	ldr	r0, [pc, #48]	@ (8002090 <UART4_IRQHandler+0x94>)
 800205e:	f7ff fdb1 	bl	8001bc4 <LL_DMA_SetDataLength>
					LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8002062:	2102      	movs	r1, #2
 8002064:	480a      	ldr	r0, [pc, #40]	@ (8002090 <UART4_IRQHandler+0x94>)
 8002066:	f7ff fd6d 	bl	8001b44 <LL_DMA_EnableStream>
					LL_USART_EnableDMAReq_RX(UART4);
 800206a:	4803      	ldr	r0, [pc, #12]	@ (8002078 <UART4_IRQHandler+0x7c>)
 800206c:	f7ff feb8 	bl	8001de0 <LL_USART_EnableDMAReq_RX>
			}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	08004684 	.word	0x08004684
 8002078:	40004c00 	.word	0x40004c00
 800207c:	40020000 	.word	0x40020000
 8002080:	20000001 	.word	0x20000001
 8002084:	20000000 	.word	0x20000000
 8002088:	08004690 	.word	0x08004690
 800208c:	20000398 	.word	0x20000398
 8002090:	40026000 	.word	0x40026000

08002094 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA2) == 1) {
 8002098:	4807      	ldr	r0, [pc, #28]	@ (80020b8 <DMA2_Stream6_IRQHandler+0x24>)
 800209a:	f7ff fdf2 	bl	8001c82 <LL_DMA_IsActiveFlag_TC6>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <DMA2_Stream6_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC6(DMA2);
 80020a4:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <DMA2_Stream6_IRQHandler+0x24>)
 80020a6:	f7ff fe3d 	bl	8001d24 <LL_DMA_ClearFlag_TC6>

			LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 80020aa:	2106      	movs	r1, #6
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <DMA2_Stream6_IRQHandler+0x24>)
 80020ae:	f7ff fd69 	bl	8001b84 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40026400 	.word	0x40026400

080020bc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e00a      	b.n	80020f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020dc:	f3af 8000 	nop.w
 80020e0:	4601      	mov	r1, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	60ba      	str	r2, [r7, #8]
 80020e8:	b2ca      	uxtb	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbf0      	blt.n	80020dc <_read+0x12>
  }

  return len;
 80020fa:	687b      	ldr	r3, [r7, #4]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800212c:	605a      	str	r2, [r3, #4]
  return 0;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_isatty>:

int _isatty(int file)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f001 ffd4 	bl	8004148 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20020000 	.word	0x20020000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	200003bc 	.word	0x200003bc
 80021d4:	20000510 	.word	0x20000510

080021d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <SystemInit+0x20>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <SystemInit+0x20>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	@ (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	@ (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	@ (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	@ 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	@ 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <LL_APB2_GRP1_EnableClock>:
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <LL_APB2_GRP1_EnableClock+0x2c>)
 800231a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800231c:	4907      	ldr	r1, [pc, #28]	@ (800233c <LL_APB2_GRP1_EnableClock+0x2c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4313      	orrs	r3, r2
 8002322:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002326:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4013      	ands	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40023800 	.word	0x40023800

08002340 <LL_TIM_DisableARRPreload>:
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_TIM_SetClockSource>:
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002372:	f023 0307 	bic.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_TIM_SetTriggerOutput>:
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	605a      	str	r2, [r3, #4]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_TIM_DisableMasterSlaveMode>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7ff ff93 	bl	8002310 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80023ea:	f7ff ff07 	bl	80021fc <__NVIC_GetPriorityGrouping>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff57 	bl	80022a8 <NVIC_EncodePriority>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4619      	mov	r1, r3
 80023fe:	2019      	movs	r0, #25
 8002400:	f7ff ff28 	bl	8002254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002404:	2019      	movs	r0, #25
 8002406:	f7ff ff07 	bl	8002218 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 29;
 800240a:	231d      	movs	r3, #29
 800240c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 60000;
 8002412:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002416:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	4619      	mov	r1, r3
 8002424:	480a      	ldr	r0, [pc, #40]	@ (8002450 <MX_TIM1_Init+0x80>)
 8002426:	f001 f869 	bl	80034fc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800242a:	4809      	ldr	r0, [pc, #36]	@ (8002450 <MX_TIM1_Init+0x80>)
 800242c:	f7ff ff88 	bl	8002340 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002430:	2100      	movs	r1, #0
 8002432:	4807      	ldr	r0, [pc, #28]	@ (8002450 <MX_TIM1_Init+0x80>)
 8002434:	f7ff ff94 	bl	8002360 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002438:	2100      	movs	r1, #0
 800243a:	4805      	ldr	r0, [pc, #20]	@ (8002450 <MX_TIM1_Init+0x80>)
 800243c:	f7ff ffa5 	bl	800238a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002440:	4803      	ldr	r0, [pc, #12]	@ (8002450 <MX_TIM1_Init+0x80>)
 8002442:	f7ff ffb5 	bl	80023b0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40010000 	.word	0x40010000

08002454 <__NVIC_GetPriorityGrouping>:
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	@ (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	@ (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	@ (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <LL_DMA_SetDataTransferDirection>:
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002574:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <LL_DMA_SetDataTransferDirection+0x44>)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4413      	add	r3, r2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002588:	4908      	ldr	r1, [pc, #32]	@ (80025ac <LL_DMA_SetDataTransferDirection+0x44>)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	440b      	add	r3, r1
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	440b      	add	r3, r1
 8002596:	4619      	mov	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	080046d0 	.word	0x080046d0

080025b0 <LL_DMA_SetMode>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <LL_DMA_SetMode+0x44>)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80025d0:	4908      	ldr	r1, [pc, #32]	@ (80025f4 <LL_DMA_SetMode+0x44>)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	440b      	add	r3, r1
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	440b      	add	r3, r1
 80025de:	4619      	mov	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	080046d0 	.word	0x080046d0

080025f8 <LL_DMA_SetPeriphIncMode>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <LL_DMA_SetPeriphIncMode+0x44>)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002618:	4908      	ldr	r1, [pc, #32]	@ (800263c <LL_DMA_SetPeriphIncMode+0x44>)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	440b      	add	r3, r1
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	440b      	add	r3, r1
 8002626:	4619      	mov	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	080046d0 	.word	0x080046d0

08002640 <LL_DMA_SetMemoryIncMode>:
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800264c:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <LL_DMA_SetMemoryIncMode+0x44>)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002660:	4908      	ldr	r1, [pc, #32]	@ (8002684 <LL_DMA_SetMemoryIncMode+0x44>)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	440b      	add	r3, r1
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	440b      	add	r3, r1
 800266e:	4619      	mov	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	080046d0 	.word	0x080046d0

08002688 <LL_DMA_SetPeriphSize>:
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002694:	4a0d      	ldr	r2, [pc, #52]	@ (80026cc <LL_DMA_SetPeriphSize+0x44>)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80026a8:	4908      	ldr	r1, [pc, #32]	@ (80026cc <LL_DMA_SetPeriphSize+0x44>)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	440b      	add	r3, r1
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	440b      	add	r3, r1
 80026b6:	4619      	mov	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	080046d0 	.word	0x080046d0

080026d0 <LL_DMA_SetMemorySize>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80026dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <LL_DMA_SetMemorySize+0x44>)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80026f0:	4908      	ldr	r1, [pc, #32]	@ (8002714 <LL_DMA_SetMemorySize+0x44>)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	440b      	add	r3, r1
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	440b      	add	r3, r1
 80026fe:	4619      	mov	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	080046d0 	.word	0x080046d0

08002718 <LL_DMA_SetStreamPriorityLevel>:
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4413      	add	r3, r2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002738:	4908      	ldr	r1, [pc, #32]	@ (800275c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	440b      	add	r3, r1
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	440b      	add	r3, r1
 8002746:	4619      	mov	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	080046d0 	.word	0x080046d0

08002760 <LL_DMA_SetChannelSelection>:
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800276c:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <LL_DMA_SetChannelSelection+0x44>)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4413      	add	r3, r2
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002780:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <LL_DMA_SetChannelSelection+0x44>)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	440b      	add	r3, r1
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	440b      	add	r3, r1
 800278e:	4619      	mov	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	080046d0 	.word	0x080046d0

080027a8 <LL_DMA_DisableFifoMode>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80027b2:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <LL_DMA_DisableFifoMode+0x3c>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <LL_DMA_DisableFifoMode+0x3c>)
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	440a      	add	r2, r1
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	4611      	mov	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	440a      	add	r2, r1
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6153      	str	r3, [r2, #20]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	080046d0 	.word	0x080046d0

080027e8 <LL_AHB1_GRP1_EnableClock>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f4:	4907      	ldr	r1, [pc, #28]	@ (8002814 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4013      	ands	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40023800 	.word	0x40023800

08002818 <LL_APB1_GRP1_EnableClock>:
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002820:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002824:	4907      	ldr	r1, [pc, #28]	@ (8002844 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4313      	orrs	r3, r2
 800282a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <LL_APB1_GRP1_EnableClock+0x2c>)
 800282e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40023800 	.word	0x40023800

08002848 <LL_APB2_GRP1_EnableClock>:
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002850:	4b08      	ldr	r3, [pc, #32]	@ (8002874 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002852:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002854:	4907      	ldr	r1, [pc, #28]	@ (8002874 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4313      	orrs	r3, r2
 800285a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <LL_APB2_GRP1_EnableClock+0x2c>)
 800285e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40023800 	.word	0x40023800

08002878 <LL_USART_Enable>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_USART_ConfigAsyncMode>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	615a      	str	r2, [r3, #20]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	@ 0x38
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	615a      	str	r2, [r3, #20]
 80028dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
 80028ec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80028ee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80028f2:	f7ff ff91 	bl	8002818 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff ff76 	bl	80027e8 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80028fc:	2303      	movs	r3, #3
 80028fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002900:	2302      	movs	r3, #2
 8002902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002904:	2303      	movs	r3, #3
 8002906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002910:	2308      	movs	r3, #8
 8002912:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	4619      	mov	r1, r3
 8002918:	4846      	ldr	r0, [pc, #280]	@ (8002a34 <MX_UART4_Init+0x170>)
 800291a:	f000 fb45 	bl	8002fa8 <LL_GPIO_Init>

  /* UART4 DMA Init */

  /* UART4_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 800291e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002922:	2102      	movs	r1, #2
 8002924:	4844      	ldr	r0, [pc, #272]	@ (8002a38 <MX_UART4_Init+0x174>)
 8002926:	f7ff ff1b 	bl	8002760 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800292a:	2200      	movs	r2, #0
 800292c:	2102      	movs	r1, #2
 800292e:	4842      	ldr	r0, [pc, #264]	@ (8002a38 <MX_UART4_Init+0x174>)
 8002930:	f7ff fe1a 	bl	8002568 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 8002934:	2200      	movs	r2, #0
 8002936:	2102      	movs	r1, #2
 8002938:	483f      	ldr	r0, [pc, #252]	@ (8002a38 <MX_UART4_Init+0x174>)
 800293a:	f7ff feed 	bl	8002718 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 800293e:	2200      	movs	r2, #0
 8002940:	2102      	movs	r1, #2
 8002942:	483d      	ldr	r0, [pc, #244]	@ (8002a38 <MX_UART4_Init+0x174>)
 8002944:	f7ff fe34 	bl	80025b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8002948:	2200      	movs	r2, #0
 800294a:	2102      	movs	r1, #2
 800294c:	483a      	ldr	r0, [pc, #232]	@ (8002a38 <MX_UART4_Init+0x174>)
 800294e:	f7ff fe53 	bl	80025f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8002952:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002956:	2102      	movs	r1, #2
 8002958:	4837      	ldr	r0, [pc, #220]	@ (8002a38 <MX_UART4_Init+0x174>)
 800295a:	f7ff fe71 	bl	8002640 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 800295e:	2200      	movs	r2, #0
 8002960:	2102      	movs	r1, #2
 8002962:	4835      	ldr	r0, [pc, #212]	@ (8002a38 <MX_UART4_Init+0x174>)
 8002964:	f7ff fe90 	bl	8002688 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8002968:	2200      	movs	r2, #0
 800296a:	2102      	movs	r1, #2
 800296c:	4832      	ldr	r0, [pc, #200]	@ (8002a38 <MX_UART4_Init+0x174>)
 800296e:	f7ff feaf 	bl	80026d0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 8002972:	2102      	movs	r1, #2
 8002974:	4830      	ldr	r0, [pc, #192]	@ (8002a38 <MX_UART4_Init+0x174>)
 8002976:	f7ff ff17 	bl	80027a8 <LL_DMA_DisableFifoMode>

  /* UART4_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_4);
 800297a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800297e:	2104      	movs	r1, #4
 8002980:	482d      	ldr	r0, [pc, #180]	@ (8002a38 <MX_UART4_Init+0x174>)
 8002982:	f7ff feed 	bl	8002760 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002986:	2240      	movs	r2, #64	@ 0x40
 8002988:	2104      	movs	r1, #4
 800298a:	482b      	ldr	r0, [pc, #172]	@ (8002a38 <MX_UART4_Init+0x174>)
 800298c:	f7ff fdec 	bl	8002568 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8002990:	2200      	movs	r2, #0
 8002992:	2104      	movs	r1, #4
 8002994:	4828      	ldr	r0, [pc, #160]	@ (8002a38 <MX_UART4_Init+0x174>)
 8002996:	f7ff febf 	bl	8002718 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800299a:	2200      	movs	r2, #0
 800299c:	2104      	movs	r1, #4
 800299e:	4826      	ldr	r0, [pc, #152]	@ (8002a38 <MX_UART4_Init+0x174>)
 80029a0:	f7ff fe06 	bl	80025b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2104      	movs	r1, #4
 80029a8:	4823      	ldr	r0, [pc, #140]	@ (8002a38 <MX_UART4_Init+0x174>)
 80029aa:	f7ff fe25 	bl	80025f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 80029ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029b2:	2104      	movs	r1, #4
 80029b4:	4820      	ldr	r0, [pc, #128]	@ (8002a38 <MX_UART4_Init+0x174>)
 80029b6:	f7ff fe43 	bl	8002640 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2104      	movs	r1, #4
 80029be:	481e      	ldr	r0, [pc, #120]	@ (8002a38 <MX_UART4_Init+0x174>)
 80029c0:	f7ff fe62 	bl	8002688 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2104      	movs	r1, #4
 80029c8:	481b      	ldr	r0, [pc, #108]	@ (8002a38 <MX_UART4_Init+0x174>)
 80029ca:	f7ff fe81 	bl	80026d0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 80029ce:	2104      	movs	r1, #4
 80029d0:	4819      	ldr	r0, [pc, #100]	@ (8002a38 <MX_UART4_Init+0x174>)
 80029d2:	f7ff fee9 	bl	80027a8 <LL_DMA_DisableFifoMode>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80029d6:	f7ff fd3d 	bl	8002454 <__NVIC_GetPriorityGrouping>
 80029da:	4603      	mov	r3, r0
 80029dc:	2200      	movs	r2, #0
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fd8d 	bl	8002500 <NVIC_EncodePriority>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4619      	mov	r1, r3
 80029ea:	2034      	movs	r0, #52	@ 0x34
 80029ec:	f7ff fd5e 	bl	80024ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80029f0:	2034      	movs	r0, #52	@ 0x34
 80029f2:	f7ff fd3d 	bl	8002470 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 80029f6:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <MX_UART4_Init+0x178>)
 80029f8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002a06:	230c      	movs	r3, #12
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8002a12:	f107 031c 	add.w	r3, r7, #28
 8002a16:	4619      	mov	r1, r3
 8002a18:	4809      	ldr	r0, [pc, #36]	@ (8002a40 <MX_UART4_Init+0x17c>)
 8002a1a:	f001 f871 	bl	8003b00 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8002a1e:	4808      	ldr	r0, [pc, #32]	@ (8002a40 <MX_UART4_Init+0x17c>)
 8002a20:	f7ff ff3a 	bl	8002898 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8002a24:	4806      	ldr	r0, [pc, #24]	@ (8002a40 <MX_UART4_Init+0x17c>)
 8002a26:	f7ff ff27 	bl	8002878 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002a2a:	bf00      	nop
 8002a2c:	3738      	adds	r7, #56	@ 0x38
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40026000 	.word	0x40026000
 8002a3c:	001e8480 	.word	0x001e8480
 8002a40:	40004c00 	.word	0x40004c00

08002a44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08e      	sub	sp, #56	@ 0x38
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	611a      	str	r2, [r3, #16]
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a6e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002a72:	f7ff fed1 	bl	8002818 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7ff feb6 	bl	80027e8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002a7c:	230c      	movs	r3, #12
 8002a7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a80:	2302      	movs	r3, #2
 8002a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002a90:	2307      	movs	r3, #7
 8002a92:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	483e      	ldr	r0, [pc, #248]	@ (8002b94 <MX_USART2_UART_Init+0x150>)
 8002a9a:	f000 fa85 	bl	8002fa8 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8002a9e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002aa2:	2105      	movs	r1, #5
 8002aa4:	483c      	ldr	r0, [pc, #240]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002aa6:	f7ff fe5b 	bl	8002760 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2105      	movs	r1, #5
 8002aae:	483a      	ldr	r0, [pc, #232]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002ab0:	f7ff fd5a 	bl	8002568 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2105      	movs	r1, #5
 8002ab8:	4837      	ldr	r0, [pc, #220]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002aba:	f7ff fe2d 	bl	8002718 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2105      	movs	r1, #5
 8002ac2:	4835      	ldr	r0, [pc, #212]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002ac4:	f7ff fd74 	bl	80025b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2105      	movs	r1, #5
 8002acc:	4832      	ldr	r0, [pc, #200]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002ace:	f7ff fd93 	bl	80025f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8002ad2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ad6:	2105      	movs	r1, #5
 8002ad8:	482f      	ldr	r0, [pc, #188]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002ada:	f7ff fdb1 	bl	8002640 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2105      	movs	r1, #5
 8002ae2:	482d      	ldr	r0, [pc, #180]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002ae4:	f7ff fdd0 	bl	8002688 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2105      	movs	r1, #5
 8002aec:	482a      	ldr	r0, [pc, #168]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002aee:	f7ff fdef 	bl	80026d0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8002af2:	2105      	movs	r1, #5
 8002af4:	4828      	ldr	r0, [pc, #160]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002af6:	f7ff fe57 	bl	80027a8 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8002afa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002afe:	2106      	movs	r1, #6
 8002b00:	4825      	ldr	r0, [pc, #148]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b02:	f7ff fe2d 	bl	8002760 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002b06:	2240      	movs	r2, #64	@ 0x40
 8002b08:	2106      	movs	r1, #6
 8002b0a:	4823      	ldr	r0, [pc, #140]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b0c:	f7ff fd2c 	bl	8002568 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2106      	movs	r1, #6
 8002b14:	4820      	ldr	r0, [pc, #128]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b16:	f7ff fdff 	bl	8002718 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2106      	movs	r1, #6
 8002b1e:	481e      	ldr	r0, [pc, #120]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b20:	f7ff fd46 	bl	80025b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2106      	movs	r1, #6
 8002b28:	481b      	ldr	r0, [pc, #108]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b2a:	f7ff fd65 	bl	80025f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8002b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b32:	2106      	movs	r1, #6
 8002b34:	4818      	ldr	r0, [pc, #96]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b36:	f7ff fd83 	bl	8002640 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2106      	movs	r1, #6
 8002b3e:	4816      	ldr	r0, [pc, #88]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b40:	f7ff fda2 	bl	8002688 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8002b44:	2200      	movs	r2, #0
 8002b46:	2106      	movs	r1, #6
 8002b48:	4813      	ldr	r0, [pc, #76]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b4a:	f7ff fdc1 	bl	80026d0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8002b4e:	2106      	movs	r1, #6
 8002b50:	4811      	ldr	r0, [pc, #68]	@ (8002b98 <MX_USART2_UART_Init+0x154>)
 8002b52:	f7ff fe29 	bl	80027a8 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002b56:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002b5a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002b68:	230c      	movs	r3, #12
 8002b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002b70:	2300      	movs	r3, #0
 8002b72:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4808      	ldr	r0, [pc, #32]	@ (8002b9c <MX_USART2_UART_Init+0x158>)
 8002b7c:	f000 ffc0 	bl	8003b00 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002b80:	4806      	ldr	r0, [pc, #24]	@ (8002b9c <MX_USART2_UART_Init+0x158>)
 8002b82:	f7ff fe89 	bl	8002898 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002b86:	4805      	ldr	r0, [pc, #20]	@ (8002b9c <MX_USART2_UART_Init+0x158>)
 8002b88:	f7ff fe76 	bl	8002878 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	3738      	adds	r7, #56	@ 0x38
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40026000 	.word	0x40026000
 8002b9c:	40004400 	.word	0x40004400

08002ba0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	@ 0x38
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	615a      	str	r2, [r3, #20]
 8002bb8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002bca:	2020      	movs	r0, #32
 8002bcc:	f7ff fe3c 	bl	8002848 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002bd0:	2004      	movs	r0, #4
 8002bd2:	f7ff fe09 	bl	80027e8 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002bd6:	23c0      	movs	r3, #192	@ 0xc0
 8002bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002bea:	2308      	movs	r3, #8
 8002bec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4830      	ldr	r0, [pc, #192]	@ (8002cb4 <MX_USART6_UART_Init+0x114>)
 8002bf4:	f000 f9d8 	bl	8002fa8 <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_5);
 8002bf8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002bfc:	2106      	movs	r1, #6
 8002bfe:	482e      	ldr	r0, [pc, #184]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c00:	f7ff fdae 	bl	8002760 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002c04:	2240      	movs	r2, #64	@ 0x40
 8002c06:	2106      	movs	r1, #6
 8002c08:	482b      	ldr	r0, [pc, #172]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c0a:	f7ff fcad 	bl	8002568 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2106      	movs	r1, #6
 8002c12:	4829      	ldr	r0, [pc, #164]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c14:	f7ff fd80 	bl	8002718 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2106      	movs	r1, #6
 8002c1c:	4826      	ldr	r0, [pc, #152]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c1e:	f7ff fcc7 	bl	80025b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2106      	movs	r1, #6
 8002c26:	4824      	ldr	r0, [pc, #144]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c28:	f7ff fce6 	bl	80025f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8002c2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c30:	2106      	movs	r1, #6
 8002c32:	4821      	ldr	r0, [pc, #132]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c34:	f7ff fd04 	bl	8002640 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2106      	movs	r1, #6
 8002c3c:	481e      	ldr	r0, [pc, #120]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c3e:	f7ff fd23 	bl	8002688 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2106      	movs	r1, #6
 8002c46:	481c      	ldr	r0, [pc, #112]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c48:	f7ff fd42 	bl	80026d0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8002c4c:	2106      	movs	r1, #6
 8002c4e:	481a      	ldr	r0, [pc, #104]	@ (8002cb8 <MX_USART6_UART_Init+0x118>)
 8002c50:	f7ff fdaa 	bl	80027a8 <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002c54:	f7ff fbfe 	bl	8002454 <__NVIC_GetPriorityGrouping>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fc4e 	bl	8002500 <NVIC_EncodePriority>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4619      	mov	r1, r3
 8002c68:	2047      	movs	r0, #71	@ 0x47
 8002c6a:	f7ff fc1f 	bl	80024ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002c6e:	2047      	movs	r0, #71	@ 0x47
 8002c70:	f7ff fbfe 	bl	8002470 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002c74:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002c78:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c86:	230c      	movs	r3, #12
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002c92:	f107 031c 	add.w	r3, r7, #28
 8002c96:	4619      	mov	r1, r3
 8002c98:	4808      	ldr	r0, [pc, #32]	@ (8002cbc <MX_USART6_UART_Init+0x11c>)
 8002c9a:	f000 ff31 	bl	8003b00 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002c9e:	4807      	ldr	r0, [pc, #28]	@ (8002cbc <MX_USART6_UART_Init+0x11c>)
 8002ca0:	f7ff fdfa 	bl	8002898 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002ca4:	4805      	ldr	r0, [pc, #20]	@ (8002cbc <MX_USART6_UART_Init+0x11c>)
 8002ca6:	f7ff fde7 	bl	8002878 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002caa:	bf00      	nop
 8002cac:	3738      	adds	r7, #56	@ 0x38
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40026400 	.word	0x40026400
 8002cbc:	40011400 	.word	0x40011400

08002cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002cc4:	f7ff fa88 	bl	80021d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cc8:	480c      	ldr	r0, [pc, #48]	@ (8002cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cca:	490d      	ldr	r1, [pc, #52]	@ (8002d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd0:	e002      	b.n	8002cd8 <LoopCopyDataInit>

08002cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd6:	3304      	adds	r3, #4

08002cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cdc:	d3f9      	bcc.n	8002cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cde:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8002d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce4:	e001      	b.n	8002cea <LoopFillZerobss>

08002ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce8:	3204      	adds	r2, #4

08002cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cec:	d3fb      	bcc.n	8002ce6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002cee:	f001 fa31 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cf2:	f7fe fb11 	bl	8001318 <main>
  bx  lr    
 8002cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d00:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8002d04:	080046e8 	.word	0x080046e8
  ldr r2, =_sbss
 8002d08:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8002d0c:	2000050c 	.word	0x2000050c

08002d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <ADC_IRQHandler>

08002d12 <LL_GPIO_SetPinMode>:
{
 8002d12:	b480      	push	{r7}
 8002d14:	b08b      	sub	sp, #44	@ 0x2c
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	613b      	str	r3, [r7, #16]
  return result;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e003      	b.n	8002d44 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2103      	movs	r1, #3
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002d66:	2320      	movs	r3, #32
 8002d68:	e003      	b.n	8002d72 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]
}
 8002d80:	bf00      	nop
 8002d82:	372c      	adds	r7, #44	@ 0x2c
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_GPIO_SetPinOutputType>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	401a      	ands	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	431a      	orrs	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_GPIO_SetPinSpeed>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b08b      	sub	sp, #44	@ 0x2c
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	613b      	str	r3, [r7, #16]
  return result;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e003      	b.n	8002dee <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2103      	movs	r1, #3
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	61fb      	str	r3, [r7, #28]
  return result;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	bf00      	nop
 8002e2c:	372c      	adds	r7, #44	@ 0x2c
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_GPIO_SetPinPull>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	b08b      	sub	sp, #44	@ 0x2c
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	613b      	str	r3, [r7, #16]
  return result;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e003      	b.n	8002e68 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2103      	movs	r1, #3
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	401a      	ands	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e003      	b.n	8002e96 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	60da      	str	r2, [r3, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	372c      	adds	r7, #44	@ 0x2c
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_GPIO_SetAFPin_0_7>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b08b      	sub	sp, #44	@ 0x2c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	613b      	str	r3, [r7, #16]
  return result;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e003      	b.n	8002ee2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	210f      	movs	r1, #15
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	61fb      	str	r3, [r7, #28]
  return result;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e003      	b.n	8002f10 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	372c      	adds	r7, #44	@ 0x2c
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_GPIO_SetAFPin_8_15>:
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b08b      	sub	sp, #44	@ 0x2c
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	613b      	str	r3, [r7, #16]
  return result;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002f52:	2320      	movs	r3, #32
 8002f54:	e003      	b.n	8002f5e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	210f      	movs	r1, #15
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	401a      	ands	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	61fb      	str	r3, [r7, #28]
  return result;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e003      	b.n	8002f8e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002f9c:	bf00      	nop
 8002f9e:	372c      	adds	r7, #44	@ 0x2c
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	617b      	str	r3, [r7, #20]
  return result;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <LL_GPIO_Init+0x2e>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e003      	b.n	8002fde <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002fe0:	e057      	b.n	8003092 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d049      	beq.n	800308c <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d003      	beq.n	8003008 <LL_GPIO_Init+0x60>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d10d      	bne.n	8003024 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	461a      	mov	r2, r3
 800300e:	6a39      	ldr	r1, [r7, #32]
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff fed3 	bl	8002dbc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	461a      	mov	r2, r3
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff feb4 	bl	8002d8c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	461a      	mov	r2, r3
 800302a:	6a39      	ldr	r1, [r7, #32]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff02 	bl	8002e36 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d121      	bne.n	800307e <LL_GPIO_Init+0xd6>
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	60bb      	str	r3, [r7, #8]
  return result;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <LL_GPIO_Init+0xac>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e003      	b.n	800305c <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800305c:	2b07      	cmp	r3, #7
 800305e:	d807      	bhi.n	8003070 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	461a      	mov	r2, r3
 8003066:	6a39      	ldr	r1, [r7, #32]
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff21 	bl	8002eb0 <LL_GPIO_SetAFPin_0_7>
 800306e:	e006      	b.n	800307e <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	461a      	mov	r2, r3
 8003076:	6a39      	ldr	r1, [r7, #32]
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff56 	bl	8002f2a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	6a39      	ldr	r1, [r7, #32]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff fe43 	bl	8002d12 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	3301      	adds	r3, #1
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1a0      	bne.n	8002fe2 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3728      	adds	r7, #40	@ 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <LL_RCC_GetSysClkSource>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030b0:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <LL_RCC_GetSysClkSource+0x18>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800

080030c8 <LL_RCC_GetAHBPrescaler>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <LL_RCC_GetAHBPrescaler+0x18>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800

080030e4 <LL_RCC_GetAPB1Prescaler>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030e8:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <LL_RCC_GetAPB1Prescaler+0x18>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <LL_RCC_GetAPB2Prescaler>:
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003104:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800

0800311c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003120:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <LL_RCC_PLL_GetMainSource+0x18>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800313c:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <LL_RCC_PLL_GetN+0x18>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	40023800 	.word	0x40023800

08003154 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003158:	4b04      	ldr	r3, [pc, #16]	@ (800316c <LL_RCC_PLL_GetP+0x18>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003174:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <LL_RCC_PLL_GetR+0x18>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003190:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <LL_RCC_PLL_GetDivider+0x18>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80031b0:	f000 f820 	bl	80031f4 <RCC_GetSystemClockFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f85c 	bl	800327c <RCC_GetHCLKClockFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f86a 	bl	80032a8 <RCC_GetPCLK1ClockFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f876 	bl	80032d0 <RCC_GetPCLK2ClockFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60da      	str	r2, [r3, #12]
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80031fe:	f7ff ff55 	bl	80030ac <LL_RCC_GetSysClkSource>
 8003202:	4603      	mov	r3, r0
 8003204:	2b0c      	cmp	r3, #12
 8003206:	d82d      	bhi.n	8003264 <RCC_GetSystemClockFreq+0x70>
 8003208:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <RCC_GetSystemClockFreq+0x1c>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003245 	.word	0x08003245
 8003214:	08003265 	.word	0x08003265
 8003218:	08003265 	.word	0x08003265
 800321c:	08003265 	.word	0x08003265
 8003220:	0800324b 	.word	0x0800324b
 8003224:	08003265 	.word	0x08003265
 8003228:	08003265 	.word	0x08003265
 800322c:	08003265 	.word	0x08003265
 8003230:	08003251 	.word	0x08003251
 8003234:	08003265 	.word	0x08003265
 8003238:	08003265 	.word	0x08003265
 800323c:	08003265 	.word	0x08003265
 8003240:	0800325b 	.word	0x0800325b
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <RCC_GetSystemClockFreq+0x80>)
 8003246:	607b      	str	r3, [r7, #4]
      break;
 8003248:	e00f      	b.n	800326a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800324a:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <RCC_GetSystemClockFreq+0x84>)
 800324c:	607b      	str	r3, [r7, #4]
      break;
 800324e:	e00c      	b.n	800326a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003250:	2008      	movs	r0, #8
 8003252:	f000 f851 	bl	80032f8 <RCC_PLL_GetFreqDomain_SYS>
 8003256:	6078      	str	r0, [r7, #4]
      break;
 8003258:	e007      	b.n	800326a <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800325a:	200c      	movs	r0, #12
 800325c:	f000 f84c 	bl	80032f8 <RCC_PLL_GetFreqDomain_SYS>
 8003260:	6078      	str	r0, [r7, #4]
      break;
 8003262:	e002      	b.n	800326a <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <RCC_GetSystemClockFreq+0x80>)
 8003266:	607b      	str	r3, [r7, #4]
      break;
 8003268:	bf00      	nop
  }

  return frequency;
 800326a:	687b      	ldr	r3, [r7, #4]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	00f42400 	.word	0x00f42400
 8003278:	017d7840 	.word	0x017d7840

0800327c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003284:	f7ff ff20 	bl	80030c8 <LL_RCC_GetAHBPrescaler>
 8003288:	4603      	mov	r3, r0
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	4a04      	ldr	r2, [pc, #16]	@ (80032a4 <RCC_GetHCLKClockFreq+0x28>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	40d3      	lsrs	r3, r2
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	080046b8 	.word	0x080046b8

080032a8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80032b0:	f7ff ff18 	bl	80030e4 <LL_RCC_GetAPB1Prescaler>
 80032b4:	4603      	mov	r3, r0
 80032b6:	0a9b      	lsrs	r3, r3, #10
 80032b8:	4a04      	ldr	r2, [pc, #16]	@ (80032cc <RCC_GetPCLK1ClockFreq+0x24>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	40d3      	lsrs	r3, r2
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	080046c8 	.word	0x080046c8

080032d0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80032d8:	f7ff ff12 	bl	8003100 <LL_RCC_GetAPB2Prescaler>
 80032dc:	4603      	mov	r3, r0
 80032de:	0b5b      	lsrs	r3, r3, #13
 80032e0:	4a04      	ldr	r2, [pc, #16]	@ (80032f4 <RCC_GetPCLK2ClockFreq+0x24>)
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	40d3      	lsrs	r3, r2
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	080046c8 	.word	0x080046c8

080032f8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800330c:	f7ff ff06 	bl	800311c <LL_RCC_PLL_GetMainSource>
 8003310:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800331e:	d003      	beq.n	8003328 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003320:	e005      	b.n	800332e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003322:	4b1c      	ldr	r3, [pc, #112]	@ (8003394 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003324:	617b      	str	r3, [r7, #20]
      break;
 8003326:	e005      	b.n	8003334 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003328:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800332a:	617b      	str	r3, [r7, #20]
      break;
 800332c:	e002      	b.n	8003334 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800332e:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003330:	617b      	str	r3, [r7, #20]
      break;
 8003332:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d114      	bne.n	8003364 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800333a:	f7ff ff27 	bl	800318c <LL_RCC_PLL_GetDivider>
 800333e:	4602      	mov	r2, r0
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fbb3 f4f2 	udiv	r4, r3, r2
 8003346:	f7ff fef7 	bl	8003138 <LL_RCC_PLL_GetN>
 800334a:	4603      	mov	r3, r0
 800334c:	fb03 f404 	mul.w	r4, r3, r4
 8003350:	f7ff ff00 	bl	8003154 <LL_RCC_PLL_GetP>
 8003354:	4603      	mov	r3, r0
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	3301      	adds	r3, #1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	e011      	b.n	8003388 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003364:	f7ff ff12 	bl	800318c <LL_RCC_PLL_GetDivider>
 8003368:	4602      	mov	r2, r0
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fbb3 f4f2 	udiv	r4, r3, r2
 8003370:	f7ff fee2 	bl	8003138 <LL_RCC_PLL_GetN>
 8003374:	4603      	mov	r3, r0
 8003376:	fb03 f404 	mul.w	r4, r3, r4
 800337a:	f7ff fef9 	bl	8003170 <LL_RCC_PLL_GetR>
 800337e:	4603      	mov	r3, r0
 8003380:	0f1b      	lsrs	r3, r3, #28
 8003382:	fbb4 f3f3 	udiv	r3, r4, r3
 8003386:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003388:	693b      	ldr	r3, [r7, #16]
}
 800338a:	4618      	mov	r0, r3
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	bf00      	nop
 8003394:	00f42400 	.word	0x00f42400
 8003398:	017d7840 	.word	0x017d7840

0800339c <LL_SPI_IsEnabled>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b40      	cmp	r3, #64	@ 0x40
 80033ae:	d101      	bne.n	80033b4 <LL_SPI_IsEnabled+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_SPI_IsEnabled+0x1a>
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	611a      	str	r2, [r3, #16]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ffd3 	bl	800339c <LL_SPI_IsEnabled>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d139      	bne.n	8003470 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003404:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	6811      	ldr	r1, [r2, #0]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	6852      	ldr	r2, [r2, #4]
 8003410:	4311      	orrs	r1, r2
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	6892      	ldr	r2, [r2, #8]
 8003416:	4311      	orrs	r1, r2
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	68d2      	ldr	r2, [r2, #12]
 800341c:	4311      	orrs	r1, r2
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	6912      	ldr	r2, [r2, #16]
 8003422:	4311      	orrs	r1, r2
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	6952      	ldr	r2, [r2, #20]
 8003428:	4311      	orrs	r1, r2
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6992      	ldr	r2, [r2, #24]
 800342e:	4311      	orrs	r1, r2
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	69d2      	ldr	r2, [r2, #28]
 8003434:	4311      	orrs	r1, r2
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	6a12      	ldr	r2, [r2, #32]
 800343a:	430a      	orrs	r2, r1
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f023 0204 	bic.w	r2, r3, #4
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	0c1b      	lsrs	r3, r3, #16
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800345e:	d105      	bne.n	800346c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffab 	bl	80033c2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	61da      	str	r2, [r3, #28]
  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <LL_TIM_SetPrescaler>:
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LL_TIM_SetAutoReload>:
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_TIM_SetRepetitionCounter>:
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f043 0201 	orr.w	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	615a      	str	r2, [r3, #20]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3d      	ldr	r2, [pc, #244]	@ (8003604 <LL_TIM_Init+0x108>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <LL_TIM_Init+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351a:	d00f      	beq.n	800353c <LL_TIM_Init+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3a      	ldr	r2, [pc, #232]	@ (8003608 <LL_TIM_Init+0x10c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00b      	beq.n	800353c <LL_TIM_Init+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a39      	ldr	r2, [pc, #228]	@ (800360c <LL_TIM_Init+0x110>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <LL_TIM_Init+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a38      	ldr	r2, [pc, #224]	@ (8003610 <LL_TIM_Init+0x114>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <LL_TIM_Init+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a37      	ldr	r2, [pc, #220]	@ (8003614 <LL_TIM_Init+0x118>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d106      	bne.n	800354a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2d      	ldr	r2, [pc, #180]	@ (8003604 <LL_TIM_Init+0x108>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02b      	beq.n	80035aa <LL_TIM_Init+0xae>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003558:	d027      	beq.n	80035aa <LL_TIM_Init+0xae>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2a      	ldr	r2, [pc, #168]	@ (8003608 <LL_TIM_Init+0x10c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d023      	beq.n	80035aa <LL_TIM_Init+0xae>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a29      	ldr	r2, [pc, #164]	@ (800360c <LL_TIM_Init+0x110>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <LL_TIM_Init+0xae>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a28      	ldr	r2, [pc, #160]	@ (8003610 <LL_TIM_Init+0x114>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01b      	beq.n	80035aa <LL_TIM_Init+0xae>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a27      	ldr	r2, [pc, #156]	@ (8003614 <LL_TIM_Init+0x118>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d017      	beq.n	80035aa <LL_TIM_Init+0xae>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a26      	ldr	r2, [pc, #152]	@ (8003618 <LL_TIM_Init+0x11c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <LL_TIM_Init+0xae>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a25      	ldr	r2, [pc, #148]	@ (800361c <LL_TIM_Init+0x120>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00f      	beq.n	80035aa <LL_TIM_Init+0xae>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a24      	ldr	r2, [pc, #144]	@ (8003620 <LL_TIM_Init+0x124>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00b      	beq.n	80035aa <LL_TIM_Init+0xae>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a23      	ldr	r2, [pc, #140]	@ (8003624 <LL_TIM_Init+0x128>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <LL_TIM_Init+0xae>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <LL_TIM_Init+0x12c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <LL_TIM_Init+0xae>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a21      	ldr	r2, [pc, #132]	@ (800362c <LL_TIM_Init+0x130>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d106      	bne.n	80035b8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff6c 	bl	80034a2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff58 	bl	8003486 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <LL_TIM_Init+0x108>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <LL_TIM_Init+0xea>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <LL_TIM_Init+0x118>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d105      	bne.n	80035f2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ff66 	bl	80034be <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ff71 	bl	80034da <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40010400 	.word	0x40010400
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800
 8003624:	40001800 	.word	0x40001800
 8003628:	40001c00 	.word	0x40001c00
 800362c:	40002000 	.word	0x40002000

08003630 <LL_USART_IsEnabled>:
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_USART_SetStopBitsLength>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_USART_SetHWFlowCtrl>:
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	615a      	str	r2, [r3, #20]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_USART_SetBaudRate>:
{
 80036a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a8:	b0c0      	sub	sp, #256	@ 0x100
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036b0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80036b4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80036b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c4:	f040 810c 	bne.w	80038e0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80036c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036da:	4622      	mov	r2, r4
 80036dc:	462b      	mov	r3, r5
 80036de:	1891      	adds	r1, r2, r2
 80036e0:	6639      	str	r1, [r7, #96]	@ 0x60
 80036e2:	415b      	adcs	r3, r3
 80036e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80036e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80036ea:	4621      	mov	r1, r4
 80036ec:	eb12 0801 	adds.w	r8, r2, r1
 80036f0:	4629      	mov	r1, r5
 80036f2:	eb43 0901 	adc.w	r9, r3, r1
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800370a:	4690      	mov	r8, r2
 800370c:	4699      	mov	r9, r3
 800370e:	4623      	mov	r3, r4
 8003710:	eb18 0303 	adds.w	r3, r8, r3
 8003714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003718:	462b      	mov	r3, r5
 800371a:	eb49 0303 	adc.w	r3, r9, r3
 800371e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003722:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003726:	2200      	movs	r2, #0
 8003728:	469a      	mov	sl, r3
 800372a:	4693      	mov	fp, r2
 800372c:	eb1a 030a 	adds.w	r3, sl, sl
 8003730:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003732:	eb4b 030b 	adc.w	r3, fp, fp
 8003736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003738:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800373c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003740:	f7fc fd60 	bl	8000204 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4b64      	ldr	r3, [pc, #400]	@ (80038dc <LL_USART_SetBaudRate+0x238>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	b29b      	uxth	r3, r3
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	b29c      	uxth	r4, r3
 8003756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800375a:	2200      	movs	r2, #0
 800375c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003760:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003764:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	1891      	adds	r1, r2, r2
 800376e:	6539      	str	r1, [r7, #80]	@ 0x50
 8003770:	415b      	adcs	r3, r3
 8003772:	657b      	str	r3, [r7, #84]	@ 0x54
 8003774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003778:	4641      	mov	r1, r8
 800377a:	1851      	adds	r1, r2, r1
 800377c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800377e:	4649      	mov	r1, r9
 8003780:	414b      	adcs	r3, r1
 8003782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003790:	4659      	mov	r1, fp
 8003792:	00cb      	lsls	r3, r1, #3
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379a:	4651      	mov	r1, sl
 800379c:	00ca      	lsls	r2, r1, #3
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	4642      	mov	r2, r8
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037ac:	464b      	mov	r3, r9
 80037ae:	460a      	mov	r2, r1
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80037b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037c2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80037c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037ca:	460b      	mov	r3, r1
 80037cc:	18db      	adds	r3, r3, r3
 80037ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80037d0:	4613      	mov	r3, r2
 80037d2:	eb42 0303 	adc.w	r3, r2, r3
 80037d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037dc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80037e0:	f7fc fd10 	bl	8000204 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4611      	mov	r1, r2
 80037ea:	4b3c      	ldr	r3, [pc, #240]	@ (80038dc <LL_USART_SetBaudRate+0x238>)
 80037ec:	fba3 2301 	umull	r2, r3, r3, r1
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	2264      	movs	r2, #100	@ 0x64
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	1acb      	subs	r3, r1, r3
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <LL_USART_SetBaudRate+0x238>)
 8003802:	fba3 2302 	umull	r2, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	b29b      	uxth	r3, r3
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	b29b      	uxth	r3, r3
 800380e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003812:	b29b      	uxth	r3, r3
 8003814:	4423      	add	r3, r4
 8003816:	b29c      	uxth	r4, r3
 8003818:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003822:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003826:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800382a:	4642      	mov	r2, r8
 800382c:	464b      	mov	r3, r9
 800382e:	1891      	adds	r1, r2, r2
 8003830:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003832:	415b      	adcs	r3, r3
 8003834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003836:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800383a:	4641      	mov	r1, r8
 800383c:	1851      	adds	r1, r2, r1
 800383e:	6339      	str	r1, [r7, #48]	@ 0x30
 8003840:	4649      	mov	r1, r9
 8003842:	414b      	adcs	r3, r1
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003852:	4659      	mov	r1, fp
 8003854:	00cb      	lsls	r3, r1, #3
 8003856:	4651      	mov	r1, sl
 8003858:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800385c:	4651      	mov	r1, sl
 800385e:	00ca      	lsls	r2, r1, #3
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	4603      	mov	r3, r0
 8003866:	4642      	mov	r2, r8
 8003868:	189b      	adds	r3, r3, r2
 800386a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800386e:	464b      	mov	r3, r9
 8003870:	460a      	mov	r2, r1
 8003872:	eb42 0303 	adc.w	r3, r2, r3
 8003876:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800387a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003884:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003888:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800388c:	460b      	mov	r3, r1
 800388e:	18db      	adds	r3, r3, r3
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003892:	4613      	mov	r3, r2
 8003894:	eb42 0303 	adc.w	r3, r2, r3
 8003898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800389a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800389e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80038a2:	f7fc fcaf 	bl	8000204 <__aeabi_uldivmod>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <LL_USART_SetBaudRate+0x238>)
 80038ac:	fba3 1302 	umull	r1, r3, r3, r2
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	2164      	movs	r1, #100	@ 0x64
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	3332      	adds	r3, #50	@ 0x32
 80038be:	4a07      	ldr	r2, [pc, #28]	@ (80038dc <LL_USART_SetBaudRate+0x238>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4423      	add	r3, r4
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038d8:	609a      	str	r2, [r3, #8]
}
 80038da:	e108      	b.n	8003aee <LL_USART_SetBaudRate+0x44a>
 80038dc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80038e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038ea:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80038f2:	4642      	mov	r2, r8
 80038f4:	464b      	mov	r3, r9
 80038f6:	1891      	adds	r1, r2, r2
 80038f8:	6239      	str	r1, [r7, #32]
 80038fa:	415b      	adcs	r3, r3
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003902:	4641      	mov	r1, r8
 8003904:	1854      	adds	r4, r2, r1
 8003906:	4649      	mov	r1, r9
 8003908:	eb43 0501 	adc.w	r5, r3, r1
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	00eb      	lsls	r3, r5, #3
 8003916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391a:	00e2      	lsls	r2, r4, #3
 800391c:	4614      	mov	r4, r2
 800391e:	461d      	mov	r5, r3
 8003920:	4643      	mov	r3, r8
 8003922:	18e3      	adds	r3, r4, r3
 8003924:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003928:	464b      	mov	r3, r9
 800392a:	eb45 0303 	adc.w	r3, r5, r3
 800392e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003932:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800393c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800394c:	4629      	mov	r1, r5
 800394e:	008b      	lsls	r3, r1, #2
 8003950:	4621      	mov	r1, r4
 8003952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003956:	4621      	mov	r1, r4
 8003958:	008a      	lsls	r2, r1, #2
 800395a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800395e:	f7fc fc51 	bl	8000204 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4b65      	ldr	r3, [pc, #404]	@ (8003afc <LL_USART_SetBaudRate+0x458>)
 8003968:	fba3 2302 	umull	r2, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	b29b      	uxth	r3, r3
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	b29c      	uxth	r4, r3
 8003974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800397e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003982:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003986:	4642      	mov	r2, r8
 8003988:	464b      	mov	r3, r9
 800398a:	1891      	adds	r1, r2, r2
 800398c:	61b9      	str	r1, [r7, #24]
 800398e:	415b      	adcs	r3, r3
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003996:	4641      	mov	r1, r8
 8003998:	1851      	adds	r1, r2, r1
 800399a:	6139      	str	r1, [r7, #16]
 800399c:	4649      	mov	r1, r9
 800399e:	414b      	adcs	r3, r1
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039ae:	4659      	mov	r1, fp
 80039b0:	00cb      	lsls	r3, r1, #3
 80039b2:	4651      	mov	r1, sl
 80039b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b8:	4651      	mov	r1, sl
 80039ba:	00ca      	lsls	r2, r1, #3
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	4603      	mov	r3, r0
 80039c2:	4642      	mov	r2, r8
 80039c4:	189b      	adds	r3, r3, r2
 80039c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039ca:	464b      	mov	r3, r9
 80039cc:	460a      	mov	r2, r1
 80039ce:	eb42 0303 	adc.w	r3, r2, r3
 80039d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80039f0:	4649      	mov	r1, r9
 80039f2:	008b      	lsls	r3, r1, #2
 80039f4:	4641      	mov	r1, r8
 80039f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039fa:	4641      	mov	r1, r8
 80039fc:	008a      	lsls	r2, r1, #2
 80039fe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003a02:	f7fc fbff 	bl	8000204 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003afc <LL_USART_SetBaudRate+0x458>)
 8003a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2264      	movs	r2, #100	@ 0x64
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	1acb      	subs	r3, r1, r3
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	3332      	adds	r3, #50	@ 0x32
 8003a20:	4a36      	ldr	r2, [pc, #216]	@ (8003afc <LL_USART_SetBaudRate+0x458>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4423      	add	r3, r4
 8003a32:	b29c      	uxth	r4, r3
 8003a34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a38:	2200      	movs	r2, #0
 8003a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a3c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a3e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a42:	4642      	mov	r2, r8
 8003a44:	464b      	mov	r3, r9
 8003a46:	1891      	adds	r1, r2, r2
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	415b      	adcs	r3, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a52:	4641      	mov	r1, r8
 8003a54:	1851      	adds	r1, r2, r1
 8003a56:	6039      	str	r1, [r7, #0]
 8003a58:	4649      	mov	r1, r9
 8003a5a:	414b      	adcs	r3, r1
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a6a:	4659      	mov	r1, fp
 8003a6c:	00cb      	lsls	r3, r1, #3
 8003a6e:	4651      	mov	r1, sl
 8003a70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a74:	4651      	mov	r1, sl
 8003a76:	00ca      	lsls	r2, r1, #3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4642      	mov	r2, r8
 8003a80:	189b      	adds	r3, r3, r2
 8003a82:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a84:	464b      	mov	r3, r9
 8003a86:	460a      	mov	r2, r1
 8003a88:	eb42 0303 	adc.w	r3, r2, r3
 8003a8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003a92:	2200      	movs	r2, #0
 8003a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	008b      	lsls	r3, r1, #2
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aae:	4641      	mov	r1, r8
 8003ab0:	008a      	lsls	r2, r1, #2
 8003ab2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003ab6:	f7fc fba5 	bl	8000204 <__aeabi_uldivmod>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <LL_USART_SetBaudRate+0x458>)
 8003ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	2164      	movs	r1, #100	@ 0x64
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	3332      	adds	r3, #50	@ 0x32
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <LL_USART_SetBaudRate+0x458>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	4423      	add	r3, r4
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aec:	609a      	str	r2, [r3, #8]
}
 8003aee:	bf00      	nop
 8003af0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003af4:	46bd      	mov	sp, r7
 8003af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afa:	bf00      	nop
 8003afc:	51eb851f 	.word	0x51eb851f

08003b00 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fd8c 	bl	8003630 <LL_USART_IsEnabled>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d15e      	bne.n	8003bdc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003b26:	f023 030c 	bic.w	r3, r3, #12
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	6851      	ldr	r1, [r2, #4]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	68d2      	ldr	r2, [r2, #12]
 8003b32:	4311      	orrs	r1, r2
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	6912      	ldr	r2, [r2, #16]
 8003b38:	4311      	orrs	r1, r2
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	6992      	ldr	r2, [r2, #24]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff fd83 	bl	8003658 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4619      	mov	r1, r3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fd90 	bl	800367e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fb20 	bl	80031a8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003be8 <LL_USART_Init+0xe8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d102      	bne.n	8003b76 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e021      	b.n	8003bba <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a1c      	ldr	r2, [pc, #112]	@ (8003bec <LL_USART_Init+0xec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d102      	bne.n	8003b84 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e01a      	b.n	8003bba <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <LL_USART_Init+0xf0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d102      	bne.n	8003b92 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e013      	b.n	8003bba <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a17      	ldr	r2, [pc, #92]	@ (8003bf4 <LL_USART_Init+0xf4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d102      	bne.n	8003ba0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e00c      	b.n	8003bba <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a15      	ldr	r2, [pc, #84]	@ (8003bf8 <LL_USART_Init+0xf8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d102      	bne.n	8003bae <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e005      	b.n	8003bba <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a12      	ldr	r2, [pc, #72]	@ (8003bfc <LL_USART_Init+0xfc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fd64 	bl	80036a4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40011000 	.word	0x40011000
 8003bec:	40004400 	.word	0x40004400
 8003bf0:	40004800 	.word	0x40004800
 8003bf4:	40011400 	.word	0x40011400
 8003bf8:	40004c00 	.word	0x40004c00
 8003bfc:	40005000 	.word	0x40005000

08003c00 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	4a07      	ldr	r2, [pc, #28]	@ (8003c30 <LL_InitTick+0x30>)
 8003c14:	3b01      	subs	r3, #1
 8003c16:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <LL_InitTick+0x30>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c1e:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <LL_InitTick+0x30>)
 8003c20:	2205      	movs	r2, #5
 8003c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000e010 	.word	0xe000e010

08003c34 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003c3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ffdd 	bl	8003c00 <LL_InitTick>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003c58:	4b0f      	ldr	r3, [pc, #60]	@ (8003c98 <LL_mDelay+0x48>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003c5e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d00c      	beq.n	8003c82 <LL_mDelay+0x32>
  {
    Delay++;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003c6e:	e008      	b.n	8003c82 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003c70:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <LL_mDelay+0x48>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <LL_mDelay+0x32>
    {
      Delay--;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f3      	bne.n	8003c70 <LL_mDelay+0x20>
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000e010 	.word	0xe000e010

08003c9c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003ca4:	4a04      	ldr	r2, [pc, #16]	@ (8003cb8 <LL_SetSystemCoreClock+0x1c>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6013      	str	r3, [r2, #0]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	200002cc 	.word	0x200002cc

08003cbc <std>:
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	b510      	push	{r4, lr}
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8003cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cca:	6083      	str	r3, [r0, #8]
 8003ccc:	8181      	strh	r1, [r0, #12]
 8003cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8003cd0:	81c2      	strh	r2, [r0, #14]
 8003cd2:	6183      	str	r3, [r0, #24]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	305c      	adds	r0, #92	@ 0x5c
 8003cda:	f000 f9e7 	bl	80040ac <memset>
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <std+0x58>)
 8003ce0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <std+0x5c>)
 8003ce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <std+0x60>)
 8003ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <std+0x64>)
 8003cec:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <std+0x68>)
 8003cf0:	6224      	str	r4, [r4, #32]
 8003cf2:	429c      	cmp	r4, r3
 8003cf4:	d006      	beq.n	8003d04 <std+0x48>
 8003cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cfa:	4294      	cmp	r4, r2
 8003cfc:	d002      	beq.n	8003d04 <std+0x48>
 8003cfe:	33d0      	adds	r3, #208	@ 0xd0
 8003d00:	429c      	cmp	r4, r3
 8003d02:	d105      	bne.n	8003d10 <std+0x54>
 8003d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0c:	f000 ba46 	b.w	800419c <__retarget_lock_init_recursive>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	bf00      	nop
 8003d14:	08003efd 	.word	0x08003efd
 8003d18:	08003f1f 	.word	0x08003f1f
 8003d1c:	08003f57 	.word	0x08003f57
 8003d20:	08003f7b 	.word	0x08003f7b
 8003d24:	200003c0 	.word	0x200003c0

08003d28 <stdio_exit_handler>:
 8003d28:	4a02      	ldr	r2, [pc, #8]	@ (8003d34 <stdio_exit_handler+0xc>)
 8003d2a:	4903      	ldr	r1, [pc, #12]	@ (8003d38 <stdio_exit_handler+0x10>)
 8003d2c:	4803      	ldr	r0, [pc, #12]	@ (8003d3c <stdio_exit_handler+0x14>)
 8003d2e:	f000 b869 	b.w	8003e04 <_fwalk_sglue>
 8003d32:	bf00      	nop
 8003d34:	200002d0 	.word	0x200002d0
 8003d38:	0800449d 	.word	0x0800449d
 8003d3c:	200002e0 	.word	0x200002e0

08003d40 <cleanup_stdio>:
 8003d40:	6841      	ldr	r1, [r0, #4]
 8003d42:	4b0c      	ldr	r3, [pc, #48]	@ (8003d74 <cleanup_stdio+0x34>)
 8003d44:	4299      	cmp	r1, r3
 8003d46:	b510      	push	{r4, lr}
 8003d48:	4604      	mov	r4, r0
 8003d4a:	d001      	beq.n	8003d50 <cleanup_stdio+0x10>
 8003d4c:	f000 fba6 	bl	800449c <_fflush_r>
 8003d50:	68a1      	ldr	r1, [r4, #8]
 8003d52:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <cleanup_stdio+0x38>)
 8003d54:	4299      	cmp	r1, r3
 8003d56:	d002      	beq.n	8003d5e <cleanup_stdio+0x1e>
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 fb9f 	bl	800449c <_fflush_r>
 8003d5e:	68e1      	ldr	r1, [r4, #12]
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <cleanup_stdio+0x3c>)
 8003d62:	4299      	cmp	r1, r3
 8003d64:	d004      	beq.n	8003d70 <cleanup_stdio+0x30>
 8003d66:	4620      	mov	r0, r4
 8003d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d6c:	f000 bb96 	b.w	800449c <_fflush_r>
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	bf00      	nop
 8003d74:	200003c0 	.word	0x200003c0
 8003d78:	20000428 	.word	0x20000428
 8003d7c:	20000490 	.word	0x20000490

08003d80 <global_stdio_init.part.0>:
 8003d80:	b510      	push	{r4, lr}
 8003d82:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <global_stdio_init.part.0+0x30>)
 8003d84:	4c0b      	ldr	r4, [pc, #44]	@ (8003db4 <global_stdio_init.part.0+0x34>)
 8003d86:	4a0c      	ldr	r2, [pc, #48]	@ (8003db8 <global_stdio_init.part.0+0x38>)
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2104      	movs	r1, #4
 8003d90:	f7ff ff94 	bl	8003cbc <std>
 8003d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d98:	2201      	movs	r2, #1
 8003d9a:	2109      	movs	r1, #9
 8003d9c:	f7ff ff8e 	bl	8003cbc <std>
 8003da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003da4:	2202      	movs	r2, #2
 8003da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003daa:	2112      	movs	r1, #18
 8003dac:	f7ff bf86 	b.w	8003cbc <std>
 8003db0:	200004f8 	.word	0x200004f8
 8003db4:	200003c0 	.word	0x200003c0
 8003db8:	08003d29 	.word	0x08003d29

08003dbc <__sfp_lock_acquire>:
 8003dbc:	4801      	ldr	r0, [pc, #4]	@ (8003dc4 <__sfp_lock_acquire+0x8>)
 8003dbe:	f000 b9ee 	b.w	800419e <__retarget_lock_acquire_recursive>
 8003dc2:	bf00      	nop
 8003dc4:	20000501 	.word	0x20000501

08003dc8 <__sfp_lock_release>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	@ (8003dd0 <__sfp_lock_release+0x8>)
 8003dca:	f000 b9e9 	b.w	80041a0 <__retarget_lock_release_recursive>
 8003dce:	bf00      	nop
 8003dd0:	20000501 	.word	0x20000501

08003dd4 <__sinit>:
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	f7ff fff0 	bl	8003dbc <__sfp_lock_acquire>
 8003ddc:	6a23      	ldr	r3, [r4, #32]
 8003dde:	b11b      	cbz	r3, 8003de8 <__sinit+0x14>
 8003de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de4:	f7ff bff0 	b.w	8003dc8 <__sfp_lock_release>
 8003de8:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <__sinit+0x28>)
 8003dea:	6223      	str	r3, [r4, #32]
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <__sinit+0x2c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f5      	bne.n	8003de0 <__sinit+0xc>
 8003df4:	f7ff ffc4 	bl	8003d80 <global_stdio_init.part.0>
 8003df8:	e7f2      	b.n	8003de0 <__sinit+0xc>
 8003dfa:	bf00      	nop
 8003dfc:	08003d41 	.word	0x08003d41
 8003e00:	200004f8 	.word	0x200004f8

08003e04 <_fwalk_sglue>:
 8003e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e08:	4607      	mov	r7, r0
 8003e0a:	4688      	mov	r8, r1
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	2600      	movs	r6, #0
 8003e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e14:	f1b9 0901 	subs.w	r9, r9, #1
 8003e18:	d505      	bpl.n	8003e26 <_fwalk_sglue+0x22>
 8003e1a:	6824      	ldr	r4, [r4, #0]
 8003e1c:	2c00      	cmp	r4, #0
 8003e1e:	d1f7      	bne.n	8003e10 <_fwalk_sglue+0xc>
 8003e20:	4630      	mov	r0, r6
 8003e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e26:	89ab      	ldrh	r3, [r5, #12]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d907      	bls.n	8003e3c <_fwalk_sglue+0x38>
 8003e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e30:	3301      	adds	r3, #1
 8003e32:	d003      	beq.n	8003e3c <_fwalk_sglue+0x38>
 8003e34:	4629      	mov	r1, r5
 8003e36:	4638      	mov	r0, r7
 8003e38:	47c0      	blx	r8
 8003e3a:	4306      	orrs	r6, r0
 8003e3c:	3568      	adds	r5, #104	@ 0x68
 8003e3e:	e7e9      	b.n	8003e14 <_fwalk_sglue+0x10>

08003e40 <_puts_r>:
 8003e40:	6a03      	ldr	r3, [r0, #32]
 8003e42:	b570      	push	{r4, r5, r6, lr}
 8003e44:	6884      	ldr	r4, [r0, #8]
 8003e46:	4605      	mov	r5, r0
 8003e48:	460e      	mov	r6, r1
 8003e4a:	b90b      	cbnz	r3, 8003e50 <_puts_r+0x10>
 8003e4c:	f7ff ffc2 	bl	8003dd4 <__sinit>
 8003e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e52:	07db      	lsls	r3, r3, #31
 8003e54:	d405      	bmi.n	8003e62 <_puts_r+0x22>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	0598      	lsls	r0, r3, #22
 8003e5a:	d402      	bmi.n	8003e62 <_puts_r+0x22>
 8003e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e5e:	f000 f99e 	bl	800419e <__retarget_lock_acquire_recursive>
 8003e62:	89a3      	ldrh	r3, [r4, #12]
 8003e64:	0719      	lsls	r1, r3, #28
 8003e66:	d502      	bpl.n	8003e6e <_puts_r+0x2e>
 8003e68:	6923      	ldr	r3, [r4, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d135      	bne.n	8003eda <_puts_r+0x9a>
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 f8c5 	bl	8004000 <__swsetup_r>
 8003e76:	b380      	cbz	r0, 8003eda <_puts_r+0x9a>
 8003e78:	f04f 35ff 	mov.w	r5, #4294967295
 8003e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e7e:	07da      	lsls	r2, r3, #31
 8003e80:	d405      	bmi.n	8003e8e <_puts_r+0x4e>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	059b      	lsls	r3, r3, #22
 8003e86:	d402      	bmi.n	8003e8e <_puts_r+0x4e>
 8003e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e8a:	f000 f989 	bl	80041a0 <__retarget_lock_release_recursive>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da04      	bge.n	8003ea0 <_puts_r+0x60>
 8003e96:	69a2      	ldr	r2, [r4, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	dc17      	bgt.n	8003ecc <_puts_r+0x8c>
 8003e9c:	290a      	cmp	r1, #10
 8003e9e:	d015      	beq.n	8003ecc <_puts_r+0x8c>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	6022      	str	r2, [r4, #0]
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	68a3      	ldr	r3, [r4, #8]
 8003eaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	60a3      	str	r3, [r4, #8]
 8003eb2:	2900      	cmp	r1, #0
 8003eb4:	d1ed      	bne.n	8003e92 <_puts_r+0x52>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da11      	bge.n	8003ede <_puts_r+0x9e>
 8003eba:	4622      	mov	r2, r4
 8003ebc:	210a      	movs	r1, #10
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 f85f 	bl	8003f82 <__swbuf_r>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d0d7      	beq.n	8003e78 <_puts_r+0x38>
 8003ec8:	250a      	movs	r5, #10
 8003eca:	e7d7      	b.n	8003e7c <_puts_r+0x3c>
 8003ecc:	4622      	mov	r2, r4
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f000 f857 	bl	8003f82 <__swbuf_r>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d1e7      	bne.n	8003ea8 <_puts_r+0x68>
 8003ed8:	e7ce      	b.n	8003e78 <_puts_r+0x38>
 8003eda:	3e01      	subs	r6, #1
 8003edc:	e7e4      	b.n	8003ea8 <_puts_r+0x68>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	6022      	str	r2, [r4, #0]
 8003ee4:	220a      	movs	r2, #10
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e7ee      	b.n	8003ec8 <_puts_r+0x88>
	...

08003eec <puts>:
 8003eec:	4b02      	ldr	r3, [pc, #8]	@ (8003ef8 <puts+0xc>)
 8003eee:	4601      	mov	r1, r0
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f7ff bfa5 	b.w	8003e40 <_puts_r>
 8003ef6:	bf00      	nop
 8003ef8:	200002dc 	.word	0x200002dc

08003efc <__sread>:
 8003efc:	b510      	push	{r4, lr}
 8003efe:	460c      	mov	r4, r1
 8003f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f04:	f000 f8fc 	bl	8004100 <_read_r>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	bfab      	itete	ge
 8003f0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f10:	181b      	addge	r3, r3, r0
 8003f12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f16:	bfac      	ite	ge
 8003f18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f1a:	81a3      	strhlt	r3, [r4, #12]
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <__swrite>:
 8003f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	461f      	mov	r7, r3
 8003f24:	898b      	ldrh	r3, [r1, #12]
 8003f26:	05db      	lsls	r3, r3, #23
 8003f28:	4605      	mov	r5, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	d505      	bpl.n	8003f3c <__swrite+0x1e>
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	2302      	movs	r3, #2
 8003f36:	2200      	movs	r2, #0
 8003f38:	f000 f8d0 	bl	80040dc <_lseek_r>
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f46:	81a3      	strh	r3, [r4, #12]
 8003f48:	4632      	mov	r2, r6
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	f000 b8e7 	b.w	8004124 <_write_r>

08003f56 <__sseek>:
 8003f56:	b510      	push	{r4, lr}
 8003f58:	460c      	mov	r4, r1
 8003f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5e:	f000 f8bd 	bl	80040dc <_lseek_r>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	bf15      	itete	ne
 8003f68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f72:	81a3      	strheq	r3, [r4, #12]
 8003f74:	bf18      	it	ne
 8003f76:	81a3      	strhne	r3, [r4, #12]
 8003f78:	bd10      	pop	{r4, pc}

08003f7a <__sclose>:
 8003f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7e:	f000 b89d 	b.w	80040bc <_close_r>

08003f82 <__swbuf_r>:
 8003f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f84:	460e      	mov	r6, r1
 8003f86:	4614      	mov	r4, r2
 8003f88:	4605      	mov	r5, r0
 8003f8a:	b118      	cbz	r0, 8003f94 <__swbuf_r+0x12>
 8003f8c:	6a03      	ldr	r3, [r0, #32]
 8003f8e:	b90b      	cbnz	r3, 8003f94 <__swbuf_r+0x12>
 8003f90:	f7ff ff20 	bl	8003dd4 <__sinit>
 8003f94:	69a3      	ldr	r3, [r4, #24]
 8003f96:	60a3      	str	r3, [r4, #8]
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	071a      	lsls	r2, r3, #28
 8003f9c:	d501      	bpl.n	8003fa2 <__swbuf_r+0x20>
 8003f9e:	6923      	ldr	r3, [r4, #16]
 8003fa0:	b943      	cbnz	r3, 8003fb4 <__swbuf_r+0x32>
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f000 f82b 	bl	8004000 <__swsetup_r>
 8003faa:	b118      	cbz	r0, 8003fb4 <__swbuf_r+0x32>
 8003fac:	f04f 37ff 	mov.w	r7, #4294967295
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	6922      	ldr	r2, [r4, #16]
 8003fb8:	1a98      	subs	r0, r3, r2
 8003fba:	6963      	ldr	r3, [r4, #20]
 8003fbc:	b2f6      	uxtb	r6, r6
 8003fbe:	4283      	cmp	r3, r0
 8003fc0:	4637      	mov	r7, r6
 8003fc2:	dc05      	bgt.n	8003fd0 <__swbuf_r+0x4e>
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f000 fa68 	bl	800449c <_fflush_r>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d1ed      	bne.n	8003fac <__swbuf_r+0x2a>
 8003fd0:	68a3      	ldr	r3, [r4, #8]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	60a3      	str	r3, [r4, #8]
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	6022      	str	r2, [r4, #0]
 8003fdc:	701e      	strb	r6, [r3, #0]
 8003fde:	6962      	ldr	r2, [r4, #20]
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d004      	beq.n	8003ff0 <__swbuf_r+0x6e>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	07db      	lsls	r3, r3, #31
 8003fea:	d5e1      	bpl.n	8003fb0 <__swbuf_r+0x2e>
 8003fec:	2e0a      	cmp	r6, #10
 8003fee:	d1df      	bne.n	8003fb0 <__swbuf_r+0x2e>
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fa52 	bl	800449c <_fflush_r>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d0d9      	beq.n	8003fb0 <__swbuf_r+0x2e>
 8003ffc:	e7d6      	b.n	8003fac <__swbuf_r+0x2a>
	...

08004000 <__swsetup_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4b29      	ldr	r3, [pc, #164]	@ (80040a8 <__swsetup_r+0xa8>)
 8004004:	4605      	mov	r5, r0
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	460c      	mov	r4, r1
 800400a:	b118      	cbz	r0, 8004014 <__swsetup_r+0x14>
 800400c:	6a03      	ldr	r3, [r0, #32]
 800400e:	b90b      	cbnz	r3, 8004014 <__swsetup_r+0x14>
 8004010:	f7ff fee0 	bl	8003dd4 <__sinit>
 8004014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004018:	0719      	lsls	r1, r3, #28
 800401a:	d422      	bmi.n	8004062 <__swsetup_r+0x62>
 800401c:	06da      	lsls	r2, r3, #27
 800401e:	d407      	bmi.n	8004030 <__swsetup_r+0x30>
 8004020:	2209      	movs	r2, #9
 8004022:	602a      	str	r2, [r5, #0]
 8004024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004028:	81a3      	strh	r3, [r4, #12]
 800402a:	f04f 30ff 	mov.w	r0, #4294967295
 800402e:	e033      	b.n	8004098 <__swsetup_r+0x98>
 8004030:	0758      	lsls	r0, r3, #29
 8004032:	d512      	bpl.n	800405a <__swsetup_r+0x5a>
 8004034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004036:	b141      	cbz	r1, 800404a <__swsetup_r+0x4a>
 8004038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800403c:	4299      	cmp	r1, r3
 800403e:	d002      	beq.n	8004046 <__swsetup_r+0x46>
 8004040:	4628      	mov	r0, r5
 8004042:	f000 f8af 	bl	80041a4 <_free_r>
 8004046:	2300      	movs	r3, #0
 8004048:	6363      	str	r3, [r4, #52]	@ 0x34
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	2300      	movs	r3, #0
 8004054:	6063      	str	r3, [r4, #4]
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	f043 0308 	orr.w	r3, r3, #8
 8004060:	81a3      	strh	r3, [r4, #12]
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	b94b      	cbnz	r3, 800407a <__swsetup_r+0x7a>
 8004066:	89a3      	ldrh	r3, [r4, #12]
 8004068:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800406c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004070:	d003      	beq.n	800407a <__swsetup_r+0x7a>
 8004072:	4621      	mov	r1, r4
 8004074:	4628      	mov	r0, r5
 8004076:	f000 fa5f 	bl	8004538 <__smakebuf_r>
 800407a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800407e:	f013 0201 	ands.w	r2, r3, #1
 8004082:	d00a      	beq.n	800409a <__swsetup_r+0x9a>
 8004084:	2200      	movs	r2, #0
 8004086:	60a2      	str	r2, [r4, #8]
 8004088:	6962      	ldr	r2, [r4, #20]
 800408a:	4252      	negs	r2, r2
 800408c:	61a2      	str	r2, [r4, #24]
 800408e:	6922      	ldr	r2, [r4, #16]
 8004090:	b942      	cbnz	r2, 80040a4 <__swsetup_r+0xa4>
 8004092:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004096:	d1c5      	bne.n	8004024 <__swsetup_r+0x24>
 8004098:	bd38      	pop	{r3, r4, r5, pc}
 800409a:	0799      	lsls	r1, r3, #30
 800409c:	bf58      	it	pl
 800409e:	6962      	ldrpl	r2, [r4, #20]
 80040a0:	60a2      	str	r2, [r4, #8]
 80040a2:	e7f4      	b.n	800408e <__swsetup_r+0x8e>
 80040a4:	2000      	movs	r0, #0
 80040a6:	e7f7      	b.n	8004098 <__swsetup_r+0x98>
 80040a8:	200002dc 	.word	0x200002dc

080040ac <memset>:
 80040ac:	4402      	add	r2, r0
 80040ae:	4603      	mov	r3, r0
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d100      	bne.n	80040b6 <memset+0xa>
 80040b4:	4770      	bx	lr
 80040b6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ba:	e7f9      	b.n	80040b0 <memset+0x4>

080040bc <_close_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d06      	ldr	r5, [pc, #24]	@ (80040d8 <_close_r+0x1c>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	f7fe f81c 	bl	8002104 <_close>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_close_r+0x1a>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_close_r+0x1a>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	200004fc 	.word	0x200004fc

080040dc <_lseek_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4d07      	ldr	r5, [pc, #28]	@ (80040fc <_lseek_r+0x20>)
 80040e0:	4604      	mov	r4, r0
 80040e2:	4608      	mov	r0, r1
 80040e4:	4611      	mov	r1, r2
 80040e6:	2200      	movs	r2, #0
 80040e8:	602a      	str	r2, [r5, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f7fe f831 	bl	8002152 <_lseek>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_lseek_r+0x1e>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_lseek_r+0x1e>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	200004fc 	.word	0x200004fc

08004100 <_read_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	@ (8004120 <_read_r+0x20>)
 8004104:	4604      	mov	r4, r0
 8004106:	4608      	mov	r0, r1
 8004108:	4611      	mov	r1, r2
 800410a:	2200      	movs	r2, #0
 800410c:	602a      	str	r2, [r5, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7fd ffdb 	bl	80020ca <_read>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_read_r+0x1e>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_read_r+0x1e>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	200004fc 	.word	0x200004fc

08004124 <_write_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	@ (8004144 <_write_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fd f998 	bl	8001468 <_write>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_write_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_write_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	200004fc 	.word	0x200004fc

08004148 <__errno>:
 8004148:	4b01      	ldr	r3, [pc, #4]	@ (8004150 <__errno+0x8>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	200002dc 	.word	0x200002dc

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4d0d      	ldr	r5, [pc, #52]	@ (800418c <__libc_init_array+0x38>)
 8004158:	4c0d      	ldr	r4, [pc, #52]	@ (8004190 <__libc_init_array+0x3c>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2600      	movs	r6, #0
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	4d0b      	ldr	r5, [pc, #44]	@ (8004194 <__libc_init_array+0x40>)
 8004166:	4c0c      	ldr	r4, [pc, #48]	@ (8004198 <__libc_init_array+0x44>)
 8004168:	f000 fa54 	bl	8004614 <_init>
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	2600      	movs	r6, #0
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	080046e0 	.word	0x080046e0
 8004190:	080046e0 	.word	0x080046e0
 8004194:	080046e0 	.word	0x080046e0
 8004198:	080046e4 	.word	0x080046e4

0800419c <__retarget_lock_init_recursive>:
 800419c:	4770      	bx	lr

0800419e <__retarget_lock_acquire_recursive>:
 800419e:	4770      	bx	lr

080041a0 <__retarget_lock_release_recursive>:
 80041a0:	4770      	bx	lr
	...

080041a4 <_free_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4605      	mov	r5, r0
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d041      	beq.n	8004230 <_free_r+0x8c>
 80041ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b0:	1f0c      	subs	r4, r1, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfb8      	it	lt
 80041b6:	18e4      	addlt	r4, r4, r3
 80041b8:	f000 f8e0 	bl	800437c <__malloc_lock>
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <_free_r+0x90>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	b933      	cbnz	r3, 80041d0 <_free_r+0x2c>
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	6014      	str	r4, [r2, #0]
 80041c6:	4628      	mov	r0, r5
 80041c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041cc:	f000 b8dc 	b.w	8004388 <__malloc_unlock>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d908      	bls.n	80041e6 <_free_r+0x42>
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	1821      	adds	r1, r4, r0
 80041d8:	428b      	cmp	r3, r1
 80041da:	bf01      	itttt	eq
 80041dc:	6819      	ldreq	r1, [r3, #0]
 80041de:	685b      	ldreq	r3, [r3, #4]
 80041e0:	1809      	addeq	r1, r1, r0
 80041e2:	6021      	streq	r1, [r4, #0]
 80041e4:	e7ed      	b.n	80041c2 <_free_r+0x1e>
 80041e6:	461a      	mov	r2, r3
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b10b      	cbz	r3, 80041f0 <_free_r+0x4c>
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d9fa      	bls.n	80041e6 <_free_r+0x42>
 80041f0:	6811      	ldr	r1, [r2, #0]
 80041f2:	1850      	adds	r0, r2, r1
 80041f4:	42a0      	cmp	r0, r4
 80041f6:	d10b      	bne.n	8004210 <_free_r+0x6c>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	4401      	add	r1, r0
 80041fc:	1850      	adds	r0, r2, r1
 80041fe:	4283      	cmp	r3, r0
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	d1e0      	bne.n	80041c6 <_free_r+0x22>
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6053      	str	r3, [r2, #4]
 800420a:	4408      	add	r0, r1
 800420c:	6010      	str	r0, [r2, #0]
 800420e:	e7da      	b.n	80041c6 <_free_r+0x22>
 8004210:	d902      	bls.n	8004218 <_free_r+0x74>
 8004212:	230c      	movs	r3, #12
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	e7d6      	b.n	80041c6 <_free_r+0x22>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	1821      	adds	r1, r4, r0
 800421c:	428b      	cmp	r3, r1
 800421e:	bf04      	itt	eq
 8004220:	6819      	ldreq	r1, [r3, #0]
 8004222:	685b      	ldreq	r3, [r3, #4]
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	bf04      	itt	eq
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6054      	str	r4, [r2, #4]
 800422e:	e7ca      	b.n	80041c6 <_free_r+0x22>
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	20000508 	.word	0x20000508

08004238 <sbrk_aligned>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0f      	ldr	r6, [pc, #60]	@ (8004278 <sbrk_aligned+0x40>)
 800423c:	460c      	mov	r4, r1
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	4605      	mov	r5, r0
 8004242:	b911      	cbnz	r1, 800424a <sbrk_aligned+0x12>
 8004244:	f000 f9d6 	bl	80045f4 <_sbrk_r>
 8004248:	6030      	str	r0, [r6, #0]
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 f9d1 	bl	80045f4 <_sbrk_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d103      	bne.n	800425e <sbrk_aligned+0x26>
 8004256:	f04f 34ff 	mov.w	r4, #4294967295
 800425a:	4620      	mov	r0, r4
 800425c:	bd70      	pop	{r4, r5, r6, pc}
 800425e:	1cc4      	adds	r4, r0, #3
 8004260:	f024 0403 	bic.w	r4, r4, #3
 8004264:	42a0      	cmp	r0, r4
 8004266:	d0f8      	beq.n	800425a <sbrk_aligned+0x22>
 8004268:	1a21      	subs	r1, r4, r0
 800426a:	4628      	mov	r0, r5
 800426c:	f000 f9c2 	bl	80045f4 <_sbrk_r>
 8004270:	3001      	adds	r0, #1
 8004272:	d1f2      	bne.n	800425a <sbrk_aligned+0x22>
 8004274:	e7ef      	b.n	8004256 <sbrk_aligned+0x1e>
 8004276:	bf00      	nop
 8004278:	20000504 	.word	0x20000504

0800427c <_malloc_r>:
 800427c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004280:	1ccd      	adds	r5, r1, #3
 8004282:	f025 0503 	bic.w	r5, r5, #3
 8004286:	3508      	adds	r5, #8
 8004288:	2d0c      	cmp	r5, #12
 800428a:	bf38      	it	cc
 800428c:	250c      	movcc	r5, #12
 800428e:	2d00      	cmp	r5, #0
 8004290:	4606      	mov	r6, r0
 8004292:	db01      	blt.n	8004298 <_malloc_r+0x1c>
 8004294:	42a9      	cmp	r1, r5
 8004296:	d904      	bls.n	80042a2 <_malloc_r+0x26>
 8004298:	230c      	movs	r3, #12
 800429a:	6033      	str	r3, [r6, #0]
 800429c:	2000      	movs	r0, #0
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004378 <_malloc_r+0xfc>
 80042a6:	f000 f869 	bl	800437c <__malloc_lock>
 80042aa:	f8d8 3000 	ldr.w	r3, [r8]
 80042ae:	461c      	mov	r4, r3
 80042b0:	bb44      	cbnz	r4, 8004304 <_malloc_r+0x88>
 80042b2:	4629      	mov	r1, r5
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7ff ffbf 	bl	8004238 <sbrk_aligned>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	4604      	mov	r4, r0
 80042be:	d158      	bne.n	8004372 <_malloc_r+0xf6>
 80042c0:	f8d8 4000 	ldr.w	r4, [r8]
 80042c4:	4627      	mov	r7, r4
 80042c6:	2f00      	cmp	r7, #0
 80042c8:	d143      	bne.n	8004352 <_malloc_r+0xd6>
 80042ca:	2c00      	cmp	r4, #0
 80042cc:	d04b      	beq.n	8004366 <_malloc_r+0xea>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	eb04 0903 	add.w	r9, r4, r3
 80042d8:	f000 f98c 	bl	80045f4 <_sbrk_r>
 80042dc:	4581      	cmp	r9, r0
 80042de:	d142      	bne.n	8004366 <_malloc_r+0xea>
 80042e0:	6821      	ldr	r1, [r4, #0]
 80042e2:	1a6d      	subs	r5, r5, r1
 80042e4:	4629      	mov	r1, r5
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff ffa6 	bl	8004238 <sbrk_aligned>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d03a      	beq.n	8004366 <_malloc_r+0xea>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	442b      	add	r3, r5
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	f8d8 3000 	ldr.w	r3, [r8]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	bb62      	cbnz	r2, 8004358 <_malloc_r+0xdc>
 80042fe:	f8c8 7000 	str.w	r7, [r8]
 8004302:	e00f      	b.n	8004324 <_malloc_r+0xa8>
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	1b52      	subs	r2, r2, r5
 8004308:	d420      	bmi.n	800434c <_malloc_r+0xd0>
 800430a:	2a0b      	cmp	r2, #11
 800430c:	d917      	bls.n	800433e <_malloc_r+0xc2>
 800430e:	1961      	adds	r1, r4, r5
 8004310:	42a3      	cmp	r3, r4
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	bf18      	it	ne
 8004316:	6059      	strne	r1, [r3, #4]
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	bf08      	it	eq
 800431c:	f8c8 1000 	streq.w	r1, [r8]
 8004320:	5162      	str	r2, [r4, r5]
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	4630      	mov	r0, r6
 8004326:	f000 f82f 	bl	8004388 <__malloc_unlock>
 800432a:	f104 000b 	add.w	r0, r4, #11
 800432e:	1d23      	adds	r3, r4, #4
 8004330:	f020 0007 	bic.w	r0, r0, #7
 8004334:	1ac2      	subs	r2, r0, r3
 8004336:	bf1c      	itt	ne
 8004338:	1a1b      	subne	r3, r3, r0
 800433a:	50a3      	strne	r3, [r4, r2]
 800433c:	e7af      	b.n	800429e <_malloc_r+0x22>
 800433e:	6862      	ldr	r2, [r4, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	bf0c      	ite	eq
 8004344:	f8c8 2000 	streq.w	r2, [r8]
 8004348:	605a      	strne	r2, [r3, #4]
 800434a:	e7eb      	b.n	8004324 <_malloc_r+0xa8>
 800434c:	4623      	mov	r3, r4
 800434e:	6864      	ldr	r4, [r4, #4]
 8004350:	e7ae      	b.n	80042b0 <_malloc_r+0x34>
 8004352:	463c      	mov	r4, r7
 8004354:	687f      	ldr	r7, [r7, #4]
 8004356:	e7b6      	b.n	80042c6 <_malloc_r+0x4a>
 8004358:	461a      	mov	r2, r3
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	42a3      	cmp	r3, r4
 800435e:	d1fb      	bne.n	8004358 <_malloc_r+0xdc>
 8004360:	2300      	movs	r3, #0
 8004362:	6053      	str	r3, [r2, #4]
 8004364:	e7de      	b.n	8004324 <_malloc_r+0xa8>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	4630      	mov	r0, r6
 800436c:	f000 f80c 	bl	8004388 <__malloc_unlock>
 8004370:	e794      	b.n	800429c <_malloc_r+0x20>
 8004372:	6005      	str	r5, [r0, #0]
 8004374:	e7d6      	b.n	8004324 <_malloc_r+0xa8>
 8004376:	bf00      	nop
 8004378:	20000508 	.word	0x20000508

0800437c <__malloc_lock>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__malloc_lock+0x8>)
 800437e:	f7ff bf0e 	b.w	800419e <__retarget_lock_acquire_recursive>
 8004382:	bf00      	nop
 8004384:	20000500 	.word	0x20000500

08004388 <__malloc_unlock>:
 8004388:	4801      	ldr	r0, [pc, #4]	@ (8004390 <__malloc_unlock+0x8>)
 800438a:	f7ff bf09 	b.w	80041a0 <__retarget_lock_release_recursive>
 800438e:	bf00      	nop
 8004390:	20000500 	.word	0x20000500

08004394 <__sflush_r>:
 8004394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439c:	0716      	lsls	r6, r2, #28
 800439e:	4605      	mov	r5, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	d454      	bmi.n	800444e <__sflush_r+0xba>
 80043a4:	684b      	ldr	r3, [r1, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	dc02      	bgt.n	80043b0 <__sflush_r+0x1c>
 80043aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	dd48      	ble.n	8004442 <__sflush_r+0xae>
 80043b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	d045      	beq.n	8004442 <__sflush_r+0xae>
 80043b6:	2300      	movs	r3, #0
 80043b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80043bc:	682f      	ldr	r7, [r5, #0]
 80043be:	6a21      	ldr	r1, [r4, #32]
 80043c0:	602b      	str	r3, [r5, #0]
 80043c2:	d030      	beq.n	8004426 <__sflush_r+0x92>
 80043c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	0759      	lsls	r1, r3, #29
 80043ca:	d505      	bpl.n	80043d8 <__sflush_r+0x44>
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	1ad2      	subs	r2, r2, r3
 80043d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80043d2:	b10b      	cbz	r3, 80043d8 <__sflush_r+0x44>
 80043d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043d6:	1ad2      	subs	r2, r2, r3
 80043d8:	2300      	movs	r3, #0
 80043da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043dc:	6a21      	ldr	r1, [r4, #32]
 80043de:	4628      	mov	r0, r5
 80043e0:	47b0      	blx	r6
 80043e2:	1c43      	adds	r3, r0, #1
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	d106      	bne.n	80043f6 <__sflush_r+0x62>
 80043e8:	6829      	ldr	r1, [r5, #0]
 80043ea:	291d      	cmp	r1, #29
 80043ec:	d82b      	bhi.n	8004446 <__sflush_r+0xb2>
 80043ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004498 <__sflush_r+0x104>)
 80043f0:	40ca      	lsrs	r2, r1
 80043f2:	07d6      	lsls	r6, r2, #31
 80043f4:	d527      	bpl.n	8004446 <__sflush_r+0xb2>
 80043f6:	2200      	movs	r2, #0
 80043f8:	6062      	str	r2, [r4, #4]
 80043fa:	04d9      	lsls	r1, r3, #19
 80043fc:	6922      	ldr	r2, [r4, #16]
 80043fe:	6022      	str	r2, [r4, #0]
 8004400:	d504      	bpl.n	800440c <__sflush_r+0x78>
 8004402:	1c42      	adds	r2, r0, #1
 8004404:	d101      	bne.n	800440a <__sflush_r+0x76>
 8004406:	682b      	ldr	r3, [r5, #0]
 8004408:	b903      	cbnz	r3, 800440c <__sflush_r+0x78>
 800440a:	6560      	str	r0, [r4, #84]	@ 0x54
 800440c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800440e:	602f      	str	r7, [r5, #0]
 8004410:	b1b9      	cbz	r1, 8004442 <__sflush_r+0xae>
 8004412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004416:	4299      	cmp	r1, r3
 8004418:	d002      	beq.n	8004420 <__sflush_r+0x8c>
 800441a:	4628      	mov	r0, r5
 800441c:	f7ff fec2 	bl	80041a4 <_free_r>
 8004420:	2300      	movs	r3, #0
 8004422:	6363      	str	r3, [r4, #52]	@ 0x34
 8004424:	e00d      	b.n	8004442 <__sflush_r+0xae>
 8004426:	2301      	movs	r3, #1
 8004428:	4628      	mov	r0, r5
 800442a:	47b0      	blx	r6
 800442c:	4602      	mov	r2, r0
 800442e:	1c50      	adds	r0, r2, #1
 8004430:	d1c9      	bne.n	80043c6 <__sflush_r+0x32>
 8004432:	682b      	ldr	r3, [r5, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0c6      	beq.n	80043c6 <__sflush_r+0x32>
 8004438:	2b1d      	cmp	r3, #29
 800443a:	d001      	beq.n	8004440 <__sflush_r+0xac>
 800443c:	2b16      	cmp	r3, #22
 800443e:	d11e      	bne.n	800447e <__sflush_r+0xea>
 8004440:	602f      	str	r7, [r5, #0]
 8004442:	2000      	movs	r0, #0
 8004444:	e022      	b.n	800448c <__sflush_r+0xf8>
 8004446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800444a:	b21b      	sxth	r3, r3
 800444c:	e01b      	b.n	8004486 <__sflush_r+0xf2>
 800444e:	690f      	ldr	r7, [r1, #16]
 8004450:	2f00      	cmp	r7, #0
 8004452:	d0f6      	beq.n	8004442 <__sflush_r+0xae>
 8004454:	0793      	lsls	r3, r2, #30
 8004456:	680e      	ldr	r6, [r1, #0]
 8004458:	bf08      	it	eq
 800445a:	694b      	ldreq	r3, [r1, #20]
 800445c:	600f      	str	r7, [r1, #0]
 800445e:	bf18      	it	ne
 8004460:	2300      	movne	r3, #0
 8004462:	eba6 0807 	sub.w	r8, r6, r7
 8004466:	608b      	str	r3, [r1, #8]
 8004468:	f1b8 0f00 	cmp.w	r8, #0
 800446c:	dde9      	ble.n	8004442 <__sflush_r+0xae>
 800446e:	6a21      	ldr	r1, [r4, #32]
 8004470:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004472:	4643      	mov	r3, r8
 8004474:	463a      	mov	r2, r7
 8004476:	4628      	mov	r0, r5
 8004478:	47b0      	blx	r6
 800447a:	2800      	cmp	r0, #0
 800447c:	dc08      	bgt.n	8004490 <__sflush_r+0xfc>
 800447e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004486:	81a3      	strh	r3, [r4, #12]
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004490:	4407      	add	r7, r0
 8004492:	eba8 0800 	sub.w	r8, r8, r0
 8004496:	e7e7      	b.n	8004468 <__sflush_r+0xd4>
 8004498:	20400001 	.word	0x20400001

0800449c <_fflush_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	690b      	ldr	r3, [r1, #16]
 80044a0:	4605      	mov	r5, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	b913      	cbnz	r3, 80044ac <_fflush_r+0x10>
 80044a6:	2500      	movs	r5, #0
 80044a8:	4628      	mov	r0, r5
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	b118      	cbz	r0, 80044b6 <_fflush_r+0x1a>
 80044ae:	6a03      	ldr	r3, [r0, #32]
 80044b0:	b90b      	cbnz	r3, 80044b6 <_fflush_r+0x1a>
 80044b2:	f7ff fc8f 	bl	8003dd4 <__sinit>
 80044b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f3      	beq.n	80044a6 <_fflush_r+0xa>
 80044be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80044c0:	07d0      	lsls	r0, r2, #31
 80044c2:	d404      	bmi.n	80044ce <_fflush_r+0x32>
 80044c4:	0599      	lsls	r1, r3, #22
 80044c6:	d402      	bmi.n	80044ce <_fflush_r+0x32>
 80044c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044ca:	f7ff fe68 	bl	800419e <__retarget_lock_acquire_recursive>
 80044ce:	4628      	mov	r0, r5
 80044d0:	4621      	mov	r1, r4
 80044d2:	f7ff ff5f 	bl	8004394 <__sflush_r>
 80044d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044d8:	07da      	lsls	r2, r3, #31
 80044da:	4605      	mov	r5, r0
 80044dc:	d4e4      	bmi.n	80044a8 <_fflush_r+0xc>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	059b      	lsls	r3, r3, #22
 80044e2:	d4e1      	bmi.n	80044a8 <_fflush_r+0xc>
 80044e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044e6:	f7ff fe5b 	bl	80041a0 <__retarget_lock_release_recursive>
 80044ea:	e7dd      	b.n	80044a8 <_fflush_r+0xc>

080044ec <__swhatbuf_r>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	460c      	mov	r4, r1
 80044f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f4:	2900      	cmp	r1, #0
 80044f6:	b096      	sub	sp, #88	@ 0x58
 80044f8:	4615      	mov	r5, r2
 80044fa:	461e      	mov	r6, r3
 80044fc:	da0d      	bge.n	800451a <__swhatbuf_r+0x2e>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	bf14      	ite	ne
 800450a:	2340      	movne	r3, #64	@ 0x40
 800450c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004510:	2000      	movs	r0, #0
 8004512:	6031      	str	r1, [r6, #0]
 8004514:	602b      	str	r3, [r5, #0]
 8004516:	b016      	add	sp, #88	@ 0x58
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	466a      	mov	r2, sp
 800451c:	f000 f848 	bl	80045b0 <_fstat_r>
 8004520:	2800      	cmp	r0, #0
 8004522:	dbec      	blt.n	80044fe <__swhatbuf_r+0x12>
 8004524:	9901      	ldr	r1, [sp, #4]
 8004526:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800452a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800452e:	4259      	negs	r1, r3
 8004530:	4159      	adcs	r1, r3
 8004532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004536:	e7eb      	b.n	8004510 <__swhatbuf_r+0x24>

08004538 <__smakebuf_r>:
 8004538:	898b      	ldrh	r3, [r1, #12]
 800453a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800453c:	079d      	lsls	r5, r3, #30
 800453e:	4606      	mov	r6, r0
 8004540:	460c      	mov	r4, r1
 8004542:	d507      	bpl.n	8004554 <__smakebuf_r+0x1c>
 8004544:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	6123      	str	r3, [r4, #16]
 800454c:	2301      	movs	r3, #1
 800454e:	6163      	str	r3, [r4, #20]
 8004550:	b003      	add	sp, #12
 8004552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004554:	ab01      	add	r3, sp, #4
 8004556:	466a      	mov	r2, sp
 8004558:	f7ff ffc8 	bl	80044ec <__swhatbuf_r>
 800455c:	9f00      	ldr	r7, [sp, #0]
 800455e:	4605      	mov	r5, r0
 8004560:	4639      	mov	r1, r7
 8004562:	4630      	mov	r0, r6
 8004564:	f7ff fe8a 	bl	800427c <_malloc_r>
 8004568:	b948      	cbnz	r0, 800457e <__smakebuf_r+0x46>
 800456a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800456e:	059a      	lsls	r2, r3, #22
 8004570:	d4ee      	bmi.n	8004550 <__smakebuf_r+0x18>
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	f043 0302 	orr.w	r3, r3, #2
 800457a:	81a3      	strh	r3, [r4, #12]
 800457c:	e7e2      	b.n	8004544 <__smakebuf_r+0xc>
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	6020      	str	r0, [r4, #0]
 8004582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	9b01      	ldr	r3, [sp, #4]
 800458a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800458e:	b15b      	cbz	r3, 80045a8 <__smakebuf_r+0x70>
 8004590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f81d 	bl	80045d4 <_isatty_r>
 800459a:	b128      	cbz	r0, 80045a8 <__smakebuf_r+0x70>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	431d      	orrs	r5, r3
 80045ac:	81a5      	strh	r5, [r4, #12]
 80045ae:	e7cf      	b.n	8004550 <__smakebuf_r+0x18>

080045b0 <_fstat_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4d07      	ldr	r5, [pc, #28]	@ (80045d0 <_fstat_r+0x20>)
 80045b4:	2300      	movs	r3, #0
 80045b6:	4604      	mov	r4, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	f7fd fdad 	bl	800211c <_fstat>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	d102      	bne.n	80045cc <_fstat_r+0x1c>
 80045c6:	682b      	ldr	r3, [r5, #0]
 80045c8:	b103      	cbz	r3, 80045cc <_fstat_r+0x1c>
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
 80045ce:	bf00      	nop
 80045d0:	200004fc 	.word	0x200004fc

080045d4 <_isatty_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	4d06      	ldr	r5, [pc, #24]	@ (80045f0 <_isatty_r+0x1c>)
 80045d8:	2300      	movs	r3, #0
 80045da:	4604      	mov	r4, r0
 80045dc:	4608      	mov	r0, r1
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	f7fd fdac 	bl	800213c <_isatty>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_isatty_r+0x1a>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_isatty_r+0x1a>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	200004fc 	.word	0x200004fc

080045f4 <_sbrk_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4d06      	ldr	r5, [pc, #24]	@ (8004610 <_sbrk_r+0x1c>)
 80045f8:	2300      	movs	r3, #0
 80045fa:	4604      	mov	r4, r0
 80045fc:	4608      	mov	r0, r1
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	f7fd fdb4 	bl	800216c <_sbrk>
 8004604:	1c43      	adds	r3, r0, #1
 8004606:	d102      	bne.n	800460e <_sbrk_r+0x1a>
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	b103      	cbz	r3, 800460e <_sbrk_r+0x1a>
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	bd38      	pop	{r3, r4, r5, pc}
 8004610:	200004fc 	.word	0x200004fc

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
